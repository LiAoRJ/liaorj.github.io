<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>SRC姿势(三)</title>
      <link href="/2022/04/24/SRC%E5%A7%BF%E5%8A%BF(%E4%B8%89)/"/>
      <url>/2022/04/24/SRC%E5%A7%BF%E5%8A%BF(%E4%B8%89)/</url>
      
        <content type="html"><![CDATA[<div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Please enter the password to read the blog." />    <label for="pass">Please enter the password to read the blog.</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none">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</div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> SRC姿势 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SRC姿势 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>游戏漏洞挖掘——待补充</title>
      <link href="/2022/04/23/%E6%B8%B8%E6%88%8F%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E2%80%94%E2%80%94%E5%BE%85%E8%A1%A5%E5%85%85/"/>
      <url>/2022/04/23/%E6%B8%B8%E6%88%8F%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E2%80%94%E2%80%94%E5%BE%85%E8%A1%A5%E5%85%85/</url>
      
        <content type="html"><![CDATA[<h1 id="游戏漏洞挖掘"><a href="#游戏漏洞挖掘" class="headerlink" title="游戏漏洞挖掘"></a>游戏漏洞挖掘</h1><h2 id="1、游戏实名认证"><a href="#1、游戏实名认证" class="headerlink" title="1、游戏实名认证"></a>1、游戏实名认证</h2><p>输入假的sfz号码 能过认证成功 &#x3D;&#x3D;漏洞</p><p>tx低危 sn高危</p>]]></content>
      
      
      <categories>
          
          <category> SRC姿势 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SRC姿势 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>红日安全代码审计学习(一)</title>
      <link href="/2022/04/20/%E7%BA%A2%E6%97%A5%E5%AE%89%E5%85%A8%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E5%AD%A6%E4%B9%A0(%E4%B8%80)/"/>
      <url>/2022/04/20/%E7%BA%A2%E6%97%A5%E5%AE%89%E5%85%A8%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E5%AD%A6%E4%B9%A0(%E4%B8%80)/</url>
      
        <content type="html"><![CDATA[<h1 id="红日安全代码审计学习"><a href="#红日安全代码审计学习" class="headerlink" title="红日安全代码审计学习"></a>红日安全代码审计学习</h1><p>项目地址：</p><p><a href="https://github.com/hongriSec/PHP-Audit-Labs#">https://github.com/hongriSec/PHP-Audit-Labs#</a></p><p>记录一下自己的学习过程</p><p>顺便加上一些自己的理解</p><span id="more"></span><h2 id="Part1"><a href="#Part1" class="headerlink" title="Part1"></a>Part1</h2><h3 id="in-array函数缺陷"><a href="#in-array函数缺陷" class="headerlink" title="in_array函数缺陷"></a><strong>in_array函数缺陷</strong></h3><p>github地址：<a href="https://github.com/hongriSec/PHP-Audit-Labs/blob/master/Part1/Day1/files/README.md">in_array函数缺陷</a></p><blockquote><p><a href="http://php.net/manual/zh/function.in-array.php"> <strong>in_array</strong> </a>：(PHP 4, PHP 5, PHP 7)</p><p><strong>功能</strong> ：检查数组中是否存在某个值</p><p><strong>定义</strong> ： <code>bool in_array ( mixed $needle , array $haystack [, bool $strict = FALSE ] )</code></p><p>在 <strong>$haystack</strong> 中搜索 <strong>$needle</strong> ，如果第三个参数 <strong>$strict</strong> 的值为 <strong>TRUE</strong> ，则 <strong>in_array()</strong> 函数会进行强检查，检查 <strong>$needle</strong> 的类型是否和 <strong>$haystack</strong> 中的相同。如果找到 <strong>$haystack</strong> ，则返回 <strong>TRUE</strong>，否则返回 <strong>FALSE</strong>。</p></blockquote><p>in_array()第三个参数未设置为true时，是弱匹配。</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">7</span><span class="keyword">shell</span>.php </span><br></pre></td></tr></table></figure><p>&#x3D;&#x3D; </p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">7 </span></span><br></pre></td></tr></table></figure><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">1</span>,<span class="number">1</span> and if(ascii(substr((select database()),<span class="number">1</span>,<span class="number">1</span>))=<span class="number">112</span>,<span class="number">1</span>,sleep(<span class="number">3</span>)));#</span><br></pre></td></tr></table></figure><p>&#x3D;&#x3D; </p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">1 </span> </span><br></pre></td></tr></table></figure><h4 id="利用场景："><a href="#利用场景：" class="headerlink" title="利用场景："></a>利用场景：</h4><p>文件上传、SQL注入白名单绕过</p><h4 id="修复建议："><a href="#修复建议：" class="headerlink" title="修复建议："></a>修复建议：</h4><p>1、第三个参数设置为 <strong>true</strong></p><p>2、使用正则匹配来处理变量</p><h3 id="filter-var函数缺陷"><a href="#filter-var函数缺陷" class="headerlink" title="filter_var函数缺陷"></a><strong>filter_var函数缺陷</strong></h3><p>github地址：<a href="https://github.com/hongriSec/PHP-Audit-Labs/blob/master/Part1/Day2/files/README.md">filter_var函数缺陷</a></p><blockquote><p><a href="http://php.net/manual/zh/function.filter-var.php"> <strong>filter_var</strong> </a>： (PHP 5 &gt;&#x3D; 5.2.0, PHP 7)</p><p><strong>功能</strong> ：使用特定的过滤器过滤一个变量</p><p><strong>定义</strong> ：<a href="http://php.net/manual/zh/language.pseudo-types.php#language.types.mixed">mixed</a> <strong>filter_var</strong> ( <a href="http://php.net/manual/zh/language.pseudo-types.php#language.types.mixed">mixed</a> <code>$variable</code> [, int <code>$filter</code> &#x3D; FILTER_DEFAULT [, <a href="http://php.net/manual/zh/language.pseudo-types.php#language.types.mixed">mixed</a> <code>$options</code> ]] )</p></blockquote><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$url = filter<span class="constructor">_var($<span class="params">_GET</span>[&#x27;<span class="params">url</span>&#x27;],FILTER_VALIDATE_URL)</span>;</span><br><span class="line">var<span class="constructor">_dump($<span class="params">url</span>)</span>;</span><br></pre></td></tr></table></figure><p>我们用<strong>FILTER_VALIDATE_URL</strong>过滤器做测试。</p><p>可以使用 <strong>:&#x2F;&#x2F;</strong> 来绕过。</p><p>由于原文没有讲清楚为什么可以绕过，本人测试了一下应该是因为filter_var函数在使用<strong>FILTER_VALIDATE_URL</strong>过滤器时，只要参数中含有 <strong>:&#x2F;&#x2F;</strong> 就视作为有效的URL。</p><p><strong><a href="http://www.baidu.com/">http://www.baidu.com</a> 是有效的URL</strong></p><p><img src="https://cdn.jsdelivr.net/gh/LiAoRJ/pic/202204202347838.png"></p><p><strong><a href="ftp://www.baidu.com是有效url/">ftp://www.baidu.com是有效URL</a></strong></p><p><img src="https://cdn.jsdelivr.net/gh/LiAoRJ/pic/202204202354607.png"></p><p><strong>0:&#x2F;&#x2F;<a href="http://www.baidu.com也是有效url,注意这个,这里可以作为一个ssrf的小trick/">www.baidu.com也是有效URL，注意这个，这里可以作为一个SSRF的小trick</a></strong></p><p><img src="https://cdn.jsdelivr.net/gh/LiAoRJ/pic/202204202355795.png"></p><p><strong>而<a href="http://www.baidu.com是无效的url/">www.baidu.com是无效的URL</a></strong></p><p><img src="https://cdn.jsdelivr.net/gh/LiAoRJ/pic/202204202356483.png"></p><h4 id="利用场景：-1"><a href="#利用场景：-1" class="headerlink" title="利用场景："></a>利用场景：</h4><p>XSS绕过</p><p>XSS场景可以使用Javascript伪协议进行绕过</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">javascript</span>://comment％<span class="number">250</span>aalert(<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p> <strong>&#x2F;&#x2F;</strong> 在JavaScript中表示单行注释， 对**%** 百分号编码成 <strong>%25</strong>，我们这里用了字符 <strong>%0a</strong> ，该字符为换行符，所以 <strong>alert</strong> 语句与注释符 <strong>&#x2F;&#x2F;</strong> 就不在同一行</p><p>程序将浏览器发来的payload：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">javascript</span>://comment％<span class="number">250</span>aalert(<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p> 先解码成： </p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">javascript</span>://comment%<span class="number">0</span>aalert(<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p> 存储在可回显在页面上变量中，然后用户点击就会触发<strong>alert</strong>函数，弹窗。</p><p><strong>SSRF trick</strong></p><p><strong>看这篇文章</strong></p><p><a href="https://www.anquanke.com/post/id/101058">https://www.anquanke.com/post/id/101058</a></p><h4 id="修复建议：-1"><a href="#修复建议：-1" class="headerlink" title="修复建议："></a>修复建议：</h4><p>对于XSS的话，最好是过滤关键词+实体化编码。</p><p>对于ssrf的话，建议正则匹配吧。</p><h3 id="实例化任意对象漏洞"><a href="#实例化任意对象漏洞" class="headerlink" title="实例化任意对象漏洞"></a>实例化任意对象漏洞</h3><p>[<a href="https://github.com/hongriSec/PHP-Audit-Labs/blob/master/Part1/Day3/files/README.md">红日安全]代码审计Day3 - 实例化任意对象漏洞</a></p><p>这个漏洞类似于php任意代码执行了</p><p><img src="https://cdn.jsdelivr.net/gh/LiAoRJ/pic/202204210028203.png"></p><p>实例化类的类名和传入类的参数均在用户的控制之下，攻击者可以通过该漏洞，调用PHP代码库的任意构造函数。即使代码本身不包含易受攻击的构造函数，我们也可以使用PHP的内置类 <strong>SimpleXMLElement</strong> 来进行 <strong>XXE</strong> 攻击，进而读取目标文件的内容，甚至命令执行。</p><p>先看看 <strong>SimpleXMLElement</strong> 类的定义：</p><blockquote><p><a href="http://php.net/manual/zh/class.simplexmlelement.php">SimpleXMLElement</a> ：(PHP 5, PHP 7)</p><p><strong>功能</strong> ：用来表示XML文档中的元素，为PHP的内置类。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/LiAoRJ/pic/202204210103549.png"></p><p>data：格式正确的XML字符串，当参数<code>data_is_url</code>是<code>True</code>时，传入一个URL字符串</p><p>options：（可选）用于指定其他Libxml参数。</p><p><strong>SimpleXMLElement</strong> 导致的XXE攻击：</p><p><img src="https://cdn.jsdelivr.net/gh/LiAoRJ/pic/202204210034481.png"></p><h4 id="利用场景：-2"><a href="#利用场景：-2" class="headerlink" title="利用场景："></a>利用场景：</h4><p>XXE</p><h4 id="修复建议：-2"><a href="#修复建议：-2" class="headerlink" title="修复建议："></a>修复建议：</h4><p>可以修改代码，不要用这种可控的参数形式。</p><p>然后提一下对XXE漏洞进行修复，可以禁止加载XML实体对象。</p><h3 id="strpos使用不当引发漏洞"><a href="#strpos使用不当引发漏洞" class="headerlink" title="strpos使用不当引发漏洞"></a>strpos使用不当引发漏洞</h3><p>[<a href="https://github.com/hongriSec/PHP-Audit-Labs/blob/master/Part1/Day4/files/README.md">红日安全]代码审计Day4 - strpos使用不当引发漏洞</a>&#96;</p><p>结合具体场景代码</p><p><img src="https://cdn.jsdelivr.net/gh/LiAoRJ/pic/202204220113952.png"></p><p>代码在 <strong>第8行</strong> 和 <strong>第9行</strong> 使用 <strong>strpos</strong> 函数来防止输入的参数含有 &lt; 和 &gt; 符号，猜测开发者应该是考虑到非法字符注入问题。</p><blockquote><p><strong><a href="http://php.net/manual/zh/function.strpos.php">strpos</a></strong> — 查找字符串首次出现的位置</p><p>作用：主要是用来查找字符在字符串中首次出现的位置。</p><p>结构：<code>int strpos ( string $haystack , mixed $needle [, int $offset = 0 ] )</code></p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">strpos</span>(<span class="string">&#x27;abcd&#x27;</span>,<span class="string">&#x27;a&#x27;</span>));   <span class="comment">#0</span></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">strpos</span>(<span class="string">&#x27;abcd&#x27;</span>,<span class="string">&#x27;x&#x27;</span>));   <span class="comment">#false</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>上面场景代码中核心判断代码是</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(!strpos($user,&#x27;&lt;&#x27;) || !strpos($user,&#x27;&gt;&#x27;)) &amp;&amp; (!strpos($pass,&#x27;&lt;&#x27;) || !strpos($pass,&#x27;&gt;&#x27;))</span><br></pre></td></tr></table></figure><p>作者考虑到可能有黑客会在登陆点进行SQL注入测试，所以判断了一下是否出现 <strong>‘&lt;’** 或 **’&gt;’</strong> 若出现则strpos函数获得出现位置，再配合  <strong>!</strong>  取反得到false</p><p>先不说strpos函数的问题，这段代码的逻辑就有问题，如果$user只出现了&gt;或&lt;号但$pass没有出现&gt;或&lt;号，那么依然可以判定成功。</p><p>例如这样</p><p><img src="https://cdn.jsdelivr.net/gh/LiAoRJ/pic/202204220131557.png"></p><p>再说回strpos函数的绕过，因为strpos函数是取字符位置，但是如果取到了位置为<strong>0</strong>，那么通过！取反得到的就会是<strong>true</strong>了，就会导致判断成功，代码如下</p><p><img src="https://cdn.jsdelivr.net/gh/LiAoRJ/pic/202204220134822.png"></p><h4 id="利用场景：-3"><a href="#利用场景：-3" class="headerlink" title="利用场景："></a>利用场景：</h4><p>ctf印象中见过</p><h4 id="修复建议：-3"><a href="#修复建议：-3" class="headerlink" title="修复建议："></a>修复建议：</h4><p>代码逻辑优化</p><p>或者登录验证那块不要这么写了（真要防止SQL注入，这样写会不会太儿戏了。。。）</p><h3 id="escapeshellarg与escapeshellcmd使用不当"><a href="#escapeshellarg与escapeshellcmd使用不当" class="headerlink" title="escapeshellarg与escapeshellcmd使用不当"></a>escapeshellarg与escapeshellcmd使用不当</h3><p>[<a href="https://github.com/hongriSec/PHP-Audit-Labs/blob/master/Part1/Day5/files/README.md">红日安全]代码审计Day5 - escapeshellarg与escapeshellcmd使用不当</a></p><p>原理：</p><p><strong>escapeshellarg()</strong> </p><p>将转码任何已经存在的单引号</p><p>例如：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$test</span> = <span class="string">&quot;127.0.0.1&#x27; -v -d a=1&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span>(<span class="title function_ invoke__">escapeshellarg</span>(<span class="variable">$test</span>));</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;127.0.0.1&#x27;</span>\<span class="string">&#x27;&#x27;</span> -v -d a=<span class="number">1</span><span class="string">&#x27;</span></span><br></pre></td></tr></table></figure><p>这里稍微解释一下</p><p>其实是变成了三个字符串的连接</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;127.0.0.1&#x27;</span></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\<span class="string">&#x27; #这里是escapeshellarg函数的效果 原来的单引号前面加上\转义</span></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;-v -d a=1&#x27;</span></span><br></pre></td></tr></table></figure><p><strong>escapeshellcmd</strong>函数</p><p><strong>escapeshellcmd()</strong> 对字符串中可能会欺骗  shell 命令执行任意命令的字符进行转义。</p><p>反斜线（\）会在以下字符之前插入：   <code>&amp;#;</code>|*?~&lt;&gt;^()[]{}$`, <code>\x0A</code>   和 <code>\xFF</code>。 <code>&#39;</code> 和 <code>&quot;</code>   仅在不配对儿的时候被转义。   </p><p>当**escapeshellarg()<strong>与</strong>escapeshellcmd()**一起使用时就会出现参数逃逸漏洞</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$test</span> = <span class="string">&quot;127.0.0.1&#x27; -v -d a=1&quot;</span>;</span><br><span class="line"><span class="variable">$test2</span> = <span class="title function_ invoke__">escapeshellarg</span>(<span class="variable">$test</span>);</span><br><span class="line"><span class="keyword">echo</span>(<span class="title function_ invoke__">escapeshellcmd</span>(<span class="variable">$test2</span>));</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;127.0.0.1&#x27;</span>\\<span class="string">&#x27;&#x27;</span> -v -d a=<span class="number">1</span>\<span class="string">&#x27;</span></span><br></pre></td></tr></table></figure><p>依然是变成了三个部分</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;1270.0.1&#x27;</span> <span class="comment">#没有发生转义 单引号是配对的</span></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\\<span class="string">&#x27;&#x27;</span>  <span class="comment">#从之前的\&#x27; 变成 \\&#x27; 这回是反斜线被转义了 所以单引号是多出来的正好与之前的第三部分的第一个单引号配对了</span></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-v -d a=<span class="number">1</span>\<span class="string">&#x27; #因为第二部分配对了 导致第三部分的单引号多余了 所以根据函数规则 未匹配的单引号会加上反斜线转义</span></span><br></pre></td></tr></table></figure><h4 id="利用场景：-4"><a href="#利用场景：-4" class="headerlink" title="利用场景："></a>利用场景：</h4><p>参数逃逸导致远程代码执行</p><p>ctf也有遇到过</p><h4 id="修复建议：-4"><a href="#修复建议：-4" class="headerlink" title="修复建议："></a>修复建议：</h4><p>不建议大家同时使用 <strong>escapeshellcmd()</strong> 和 <strong>escapeshellarg()</strong> 函数对参数进行过滤</p><h3 id="正则使用不当导致的路径穿越问题"><a href="#正则使用不当导致的路径穿越问题" class="headerlink" title="正则使用不当导致的路径穿越问题"></a>正则使用不当导致的路径穿越问题</h3><p>[<a href="https://github.com/hongriSec/PHP-Audit-Labs/blob/master/Part1/Day6/files/README.md">红日安全]代码审计Day6 - 正则使用不当导致的路径穿越问题</a></p><blockquote><p><a href="http://php.net/manual/zh/function.preg-replace.php"><strong>preg_replace</strong></a>：(PHP 4, PHP 5, PHP 7)</p><p><strong>功能</strong> ： 函数执行一个正则表达式的搜索和替换</p><p><strong>定义</strong> ： <code>mixed preg_replace ( mixed $pattern , mixed $replacement , mixed $subject [, int $limit = -1 [, int &amp;$count ]] )</code></p><p>搜索 <strong>subject</strong> 中匹配 <strong>pattern</strong> 的部分， 如果匹配成功将其替换成 <strong>replacement</strong> 。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/LiAoRJ/pic/202204230021968.png"></p><p>本质上是对正则表达式的绕过</p><p><strong>preg_replace</strong> 中的 <strong>pattern</strong> 部分 ，该正则表达式并未起到过滤目录路径字符的作用。<code>[^a-z.-_]</code>  表示匹配除了 <strong>a</strong> 字符到 <strong>z</strong> 字符、**.** 字符到 <strong>_</strong> 字符之间的所有字符。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">../../ config.php</span><br></pre></td></tr></table></figure><p>即可删除config.php文件</p><h4 id="利用场景：-5"><a href="#利用场景：-5" class="headerlink" title="利用场景："></a>利用场景：</h4><p>本质是对正则的绕过，只要正则写的不完善，都可以进行绕过尝试。</p><p>CTF中也有出现过。</p><h4 id="修复建议：-5"><a href="#修复建议：-5" class="headerlink" title="修复建议："></a>修复建议：</h4><p>结合业务修改完善正则表达式。</p><h3 id="parse-str函数缺陷"><a href="#parse-str函数缺陷" class="headerlink" title="parse_str函数缺陷"></a>parse_str函数缺陷</h3><p>[<a href="https://github.com/hongriSec/PHP-Audit-Labs/blob/master/Part1/Day7/files/README.md">红日安全]代码审计Day7 - parse_str函数缺陷</a></p><p>这个函数的缺陷实际上导致的是一个<strong>变量覆盖</strong>漏洞。</p><blockquote><p><a href="http://php.net/manual/zh/function.parse-str.php"> <strong>parse_str</strong> </a></p><p><strong>功能</strong> ：parse_str的作用就是解析字符串并且注册成变量，它在注册变量之前不会验证当前变量是否存在，所以会直接覆盖掉当前作用域中原有的变量。</p><p><strong>定义</strong> ：<code>void parse_str( string $encoded_string [, array &amp;$result ] )</code></p><p>如果 <strong>encoded_string</strong> 是 URL 传入的查询字符串（query string），则将它解析为变量并设置到当前作用域（如果提供了 result 则会设置到该数组里 ）。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/LiAoRJ/pic/202204230119878.png"></p><h4 id="利用场景：-6"><a href="#利用场景：-6" class="headerlink" title="利用场景："></a>利用场景：</h4><p>白盒审计</p><p>ctf遇到过</p><h4 id="修复建议：-6"><a href="#修复建议：-6" class="headerlink" title="修复建议："></a>修复建议：</h4><p>在注册变量前先判断变量是否存在</p><h3 id="preg-replace函数之命令执行"><a href="#preg-replace函数之命令执行" class="headerlink" title="preg_replace函数之命令执行"></a>preg_replace函数之命令执行</h3><p>[<a href="https://github.com/hongriSec/PHP-Audit-Labs/blob/master/Part1/Day8/files/README.md">红日安全]代码审计Day8 - preg_replace函数之命令执行</a></p><blockquote><p><a href="http://php.net/manual/zh/function.preg-replace.php"><strong>preg_replace</strong></a>：(PHP 5.5)</p><p><strong>功能</strong> ： 函数执行一个正则表达式的搜索和替换</p><p><strong>定义</strong> ： <code>mixed preg_replace ( mixed $pattern , mixed $replacement , mixed $subject [, int $limit = -1 [, int &amp;$count ]] )</code></p><p>搜索 <strong>subject</strong> 中匹配 <strong>pattern</strong> 的部分， 如果匹配成功以 <strong>replacement</strong> 进行替换</p></blockquote><ul><li><strong>$pattern</strong> 存在 <strong>&#x2F;e</strong> 模式修正符，允许代码执行</li><li><strong>&#x2F;e</strong> 模式修正符，是 **preg_replace() ** 将 <strong>$replacement</strong> 当做php代码来执行</li></ul><p>总结就是 php5.5版本以下，<strong>preg_replace</strong>函数有一个&#x2F;e模式，开启了就会导致代码执行。</p><p><strong>经典问题案例：</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">header</span>(<span class="string">&quot;Content-Type: text/plain&quot;</span>);</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">complexStrtolower</span>(<span class="params"> <span class="variable">$regex</span>, <span class="variable">$value</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/(&#x27;</span>. <span class="variable">$regex</span>.<span class="string">&#x27;)/ei&#x27;</span>,<span class="string">&#x27;strtolower(&quot;\1&quot;)&#x27;</span>,<span class="variable">$value</span>);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">foreach</span> (<span class="variable">$_GET</span> <span class="keyword">as</span> <span class="variable">$regex</span> =&gt; <span class="variable">$value</span>)&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="title function_ invoke__">complexStrtolower</span>(<span class="variable">$regex</span>, <span class="variable">$value</span>).<span class="string">&quot;n&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>preg_replace 使用了 &#x2F;e 模式，导致可以代码执行，我们可以控制第一个和第三个参数，第二个参数固定为 ‘strtolower(“\1”)’ 字符串。</p><p>上面的命令执行，相当于 <strong>eval(‘strtolower(“\1”);’)</strong></p><p>如何进行命令执行其他恶意代码？</p><p>这里要用到一个PHP的小<strong>trick</strong>，<strong>反向引用</strong>。</p><p>看了几篇文章，感觉讲的不是很清楚，这里解释一下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">反向引用</span><br><span class="line">对一个正则表达式模式或部分模式 两边添加圆括号 将导致相关 匹配存储到一个临时缓冲区 中，</span><br><span class="line">所捕获的每个子匹配都按照在正则表达式模式中从左到右出现的顺序存储。</span><br><span class="line">缓冲区编号从 1 开始，最多可存储 99 个捕获的子表达式。每个缓冲区都可以使用 <span class="string">&#x27;\n&#x27;</span> 访问，</span><br><span class="line">其中 n 为一个标识特定缓冲区的一位或两位十进制数。</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">camelize</span>(<span class="params"><span class="variable">$word</span></span>) </span>&#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/(^|_)([a-z])/e&#x27;</span>, <span class="string">&#x27;strtoupper(&quot;\2&quot;)&#x27;</span>, <span class="variable">$word</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面这段代码，就是捕获匹配的 <code>(^|_)</code> 和 <code>([a-z])</code> 部分。它们从 1 开始编号，因此您有反向引用 1 和 2。</p><p>1是正则  **(^|_) ** 所匹配到的东西，2是  <strong>([a-z])</strong>  所匹配到的东西。这里还有一个隐藏点 <strong>0 是整个匹配的字符串</strong> 很多文章没讲到这个。</p><p>回到上面的代码中</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/(&#x27;</span>. <span class="variable">$regex</span>.<span class="string">&#x27;)/ei&#x27;</span>,<span class="string">&#x27;strtolower(&quot;\1&quot;)&#x27;</span>,<span class="variable">$value</span>);</span><br></pre></td></tr></table></figure><p>第二个参数中的\\1，实际上就是\1，配合反向引用的规则，\1就是指第一个子匹配项。</p><p>那上面的命令执行，就相当于 <strong>eval(‘strtolower(“满足正则表达式的$value”);’)</strong></p><p>官方 <strong>payload</strong> 为： <strong>&#x2F;?.*&#x3D;{${phpinfo()}}</strong></p><p><strong>.</strong>* 正则匹配任意多个字符</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">原先的语句： <span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/(&#x27;</span> . <span class="variable">$regex</span> . <span class="string">&#x27;)/ei&#x27;</span>, <span class="string">&#x27;strtolower(&quot;\\1&quot;)&#x27;</span>, <span class="variable">$value</span>);</span><br><span class="line">变成了语句： <span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/(.*)/ei&#x27;</span>, <span class="string">&#x27;strtolower(&quot;\\1&quot;)&#x27;</span>, &#123;$&#123;<span class="title function_ invoke__">phpinfo</span>()&#125;&#125;);</span><br></pre></td></tr></table></figure><p>但是这个payload是有问题的</p><p>以**.<em><strong>作为参数名是非法的，会自动转化成</strong>_</em>**</p><p><img src="https://cdn.jsdelivr.net/gh/LiAoRJ/pic/202204231609346.png"></p><p>图片来自：<a href="https://www.cnblogs.com/HelloCTF/p/13184476.html">https://www.cnblogs.com/HelloCTF/p/13184476.html</a></p><p>稍微修改以下payload即可</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\S*=<span class="variable">$&#123;phpinfo()&#125;</span></span><br></pre></td></tr></table></figure><p><strong>\S</strong>* 正则匹配任意多个非空白符</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">`\C`、`\D`、`\H`、`\N`、`\S`、`\V`、`\X` 都能代替</span><br></pre></td></tr></table></figure><p>匹配到 <strong>{${phpinfo()}}</strong> 或者 <strong>${phpinfo()}</strong> ，才能执行 phpinfo 函数，这是一个小坑。这实际上是 PHP可变变量 的原因。在PHP中双引号包裹的字符串中可以解析变量，而单引号则不行。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="variable">$a</span> = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;a=<span class="subst">$a</span>&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;a=$a&#x27;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a=hello </span><br><span class="line">a=<span class="variable">$a</span></span><br></pre></td></tr></table></figure><p>为什么要匹配到 <strong>{${phpinfo()}}</strong> 或者 <strong>${phpinfo()}</strong> ，才能执行 <strong>phpinfo</strong> 函数，这是一个小坑。这实际上是 <a href="http://php.net/manual/zh/language.variables.variable.php">PHP可变变量</a> 的原因。在PHP中双引号包裹的字符串中可以解析变量，而单引号则不行。 <strong>${phpinfo()}</strong> 中的 <strong>phpinfo()</strong> 会被当做变量先执行，执行后，即变成 <strong>${1}</strong> (phpinfo()成功执行返回true)。</p><h4 id="利用场景：-7"><a href="#利用场景：-7" class="headerlink" title="利用场景："></a>利用场景：</h4><p>PHP版本有限制，可能见到的机会不多。</p><p>ctf出现过作为考点的题目</p><h4 id="修复建议：-7"><a href="#修复建议：-7" class="headerlink" title="修复建议："></a>修复建议：</h4><p>避免使用 <strong>&#x2F;e</strong> 模式修正符</p><h3 id="str-replace函数过滤不当"><a href="#str-replace函数过滤不当" class="headerlink" title="str_replace函数过滤不当"></a>str_replace函数过滤不当</h3><p>[<a href="https://github.com/hongriSec/PHP-Audit-Labs/blob/master/Part1/Day9/files/README.md">红日安全]代码审计Day9 - str_replace函数过滤不当</a></p><blockquote><p><a href="http://php.net/manual/zh/function.str-replace.php"> str_replace </a>：(PHP 4, PHP 5, PHP 7)</p><p><strong>功能</strong> ：子字符串替换</p><p><strong>定义</strong> ： <code>mixed str_replace ( mixed $search , mixed $replace , mixed $subject [, int &amp;$count ] )</code></p><p>该函数返回一个字符串或者数组。如下：</p><p>str_replace(字符串1，字符串2，字符串3)：将字符串3中出现的所有字符串1换成字符串2。</p><p>str_replace(数组1，字符串1，字符串2)：将字符串2中出现的所有数组1中的值，换成字符串1。</p><p>str_replace(数组1，数组2，字符串1)：将字符串1中出现的所有数组1一一对应，替换成数组2的值，多余的替换成空字符串。</p></blockquote><p>本质是过滤不严谨</p><p><img src="https://cdn.jsdelivr.net/gh/LiAoRJ/pic/202204231919587.png"></p><p>以上代码是将 <strong>..&#x2F;</strong> 字符替换成空，然后进行路径拼接</p><p>payload：**….&#x2F;&#x2F;** 或者 <strong>…&#x2F;.&#x2F;</strong> ，在经过程序的 <strong>str_replace</strong> 函数处理后，都会变成 <strong>..&#x2F;</strong> </p><h4 id="利用场景：-8"><a href="#利用场景：-8" class="headerlink" title="利用场景："></a>利用场景：</h4><p>任意文件读取，任意文件删除……</p><h4 id="修复建议：-8"><a href="#修复建议：-8" class="headerlink" title="修复建议："></a>修复建议：</h4><p>结合业务场景进行过滤</p><h3 id="程序未恰当exit导致的问题"><a href="#程序未恰当exit导致的问题" class="headerlink" title="程序未恰当exit导致的问题"></a>程序未恰当exit导致的问题</h3><p>[<a href="https://github.com/hongriSec/PHP-Audit-Labs/blob/master/Part1/Day10/files/README.md">红日安全]代码审计Day10 - 程序未恰当exit导致的问题</a></p><p>本质上代码逻辑有问题，在本应该立即exit退出的地方，没有退出函数，使得程序继续运行，出现非预期的情况。</p><h4 id="利用场景：-9"><a href="#利用场景：-9" class="headerlink" title="利用场景："></a>利用场景：</h4><p>重装漏洞</p><h4 id="修复建议：-9"><a href="#修复建议：-9" class="headerlink" title="修复建议："></a>修复建议：</h4><p>在正确的地方退出程序即可，使用 <strong>die</strong> 、 <strong>exit</strong> 等函数。</p><h3 id="unserialize反序列化漏洞"><a href="#unserialize反序列化漏洞" class="headerlink" title="unserialize反序列化漏洞"></a>unserialize反序列化漏洞</h3><p>[<a href="https://github.com/hongriSec/PHP-Audit-Labs/blob/master/Part1/Day11/files/README.md">红日安全]代码审计Day11 - unserialize反序列化漏洞</a></p><p>这个可以说是打ctf之前经常能见到。</p><p>这里直接推几篇文章</p><p>这一篇就够了</p><p><a href="https://blog.csdn.net/solitudi/article/details/113588692">https://blog.csdn.net/solitudi/article/details/113588692</a></p><h4 id="利用场景：-10"><a href="#利用场景：-10" class="headerlink" title="利用场景："></a>利用场景：</h4><p>构造POP链rce</p><p>ctf</p><h4 id="修复建议：-10"><a href="#修复建议：-10" class="headerlink" title="修复建议："></a>修复建议：</h4><p>不要把用户的输入或者是用户可控的参数值直接放进反序列化的操作中</p><h3 id="误用htmlentities函数引发的漏洞"><a href="#误用htmlentities函数引发的漏洞" class="headerlink" title="误用htmlentities函数引发的漏洞"></a>误用htmlentities函数引发的漏洞</h3><p>[<a href="https://github.com/hongriSec/PHP-Audit-Labs/blob/master/Part1/Day12/files/README.md">红日安全]代码审计Day12 - 误用htmlentities函数引发的漏洞</a></p><blockquote><p><a href="http://php.net/manual/zh/function.htmlentities.php">htmlentities</a> — 将字符转换为 HTML 转义字符</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">string</span> <span class="title function_ invoke__">htmlentities</span> ( <span class="keyword">string</span> <span class="variable">$string</span> [, <span class="keyword">int</span> <span class="variable">$flags</span> = ENT_COMPAT | ENT_HTML401 [, <span class="keyword">string</span> <span class="variable">$encoding</span> = <span class="title function_ invoke__">ini_get</span>(<span class="string">&quot;default_charset&quot;</span>) [, <span class="keyword">bool</span> <span class="variable">$double_encode</span> = <span class="literal">true</span> ]]] )</span><br></pre></td></tr></table></figure><p>作用：在写PHP代码时，不能在字符串中直接写实体字符，PHP提供了一个将HTML特殊字符转换成实体字符的函数 htmlentities()。</p></blockquote><p>注：<strong>htmlentities()</strong> 并不能转换所有的特殊字符，是转换除了空格之外的特殊字符，且单引号和双引号需要单独控制（通过第二个参数）。第2个参数取值有3种，分别如下：</p><ul><li>ENT_COMPAT（默认值）：只转换双引号。</li><li>ENT_QUOTES：两种引号都转换。</li><li>ENT_NOQUOTES：两种引号都不转换。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/LiAoRJ/pic/202204231947807.png"></p><h4 id="利用场景：-11"><a href="#利用场景：-11" class="headerlink" title="利用场景："></a>利用场景：</h4><p>当参数没设置清楚会导致出现SQL注入、XSS。</p><h4 id="修复建议：-11"><a href="#修复建议：-11" class="headerlink" title="修复建议："></a>修复建议：</h4><p><strong>htmlentities</strong> 这个函数使用的时候，尽量加上可选参数，并且选择 <strong>ENT_QUOTES</strong> 转换单引号和双引号 参数。</p><h3 id="特定场合下addslashes函数的绕过"><a href="#特定场合下addslashes函数的绕过" class="headerlink" title="特定场合下addslashes函数的绕过"></a>特定场合下addslashes函数的绕过</h3><p>[<a href="https://github.com/hongriSec/PHP-Audit-Labs/blob/master/Part1/Day13/files/README.md">红日安全]代码审计Day13 - 特定场合下addslashes函数的绕过</a></p><blockquote><p><a href="http://php.net/manual/zh/function.addslashes.php">addslashes</a> — 使用反斜线引用字符串</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">string</span> addslashes ( <span class="built_in">string</span> $str )</span><br></pre></td></tr></table></figure><p>作用：在单引号（’）、双引号（”）、反斜线（\）与 NULL（ <strong>NULL</strong> 字符）字符之前加上反斜线。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/LiAoRJ/pic/202204231952107.png"></p><p>具体案例：</p><p><img src="https://cdn.jsdelivr.net/gh/LiAoRJ/pic/202204231956690.png"></p><p>代码 <strong>第33行</strong> ，通过 <strong>POST</strong> 方式传入 <strong>user</strong> 和 <strong>passwd</strong> 两个参数，通过 <strong>isValid()</strong> 来判断登陆是否合法。我们跟进一下 <strong>isValid()</strong> 这个函数，该函数主要功能代码在 <strong>第12行-第22行</strong> ，我们看到 <strong>13行</strong> 和 <strong>14行</strong> 调用 <strong>sanitizeInput()</strong> 针对 <strong>user</strong> 和 <strong>password</strong> 进行相关处理。</p><p>跟进一下 <strong>sanitizeInput()</strong> ，主要功能代码在 <strong>第24行-第29行</strong> ，这里针对输入的数据调用 <strong>addslashes</strong> 函数进行处理，然后再针对处理后的内容进行长度的判断，如果长度大于20，就只截取前20个字符。</p><p>滤了单引号，正常情况下是没有注入了，那为什么还能导致注入了，原因实际上出在了 <strong>substr</strong> 函数</p><blockquote><p><a href="http://php.net/manual/zh/function.substr.php">substr</a> — 返回字符串的子串</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">string</span> substr ( <span class="built_in">string</span> $string , <span class="built_in">int</span> $start [, <span class="built_in">int</span> $length ] )</span><br></pre></td></tr></table></figure><p>作用：返回字符串 <code>string</code> 由 <code>start</code> 和 <code>length</code> 参数指定的子字符串。</p></blockquote><p>代码中length默认为20</p><p>我们里可以用他默认的长度为20，设计一个payload</p><p>正常情况输入</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">user=<span class="number">1234567890123456789</span><span class="string">&#x27;</span></span><br></pre></td></tr></table></figure><p>会被转换成</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">user=<span class="number">1234567890123456789</span>\<span class="string">&#x27;</span></span><br></pre></td></tr></table></figure><p>但是经过substr函数的截取</p><p>又变成了</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">user</span><span class="operator">=</span><span class="number">1234567890123456789</span>\</span><br></pre></td></tr></table></figure><p>再结合具体代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select <span class="title function_ invoke__">count</span>(p) <span class="keyword">from</span> user u where user = <span class="string">&#x27;1234567890123456789\&#x27; AND password = &#x27;</span><span class="variable">$pass</span><span class="string">&#x27;</span></span><br></pre></td></tr></table></figure><p>\将本来是用来闭合user的单引号转义成了正常的单引号，所以签名的单引号与$pass的前一个单引号进行了闭合。</p><p>这里我们让 <strong>pass&#x3D;or 1&#x3D;1#</strong> ，那么最后的sql语句如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select <span class="title function_ invoke__">count</span>(p) <span class="keyword">from</span> user where user = <span class="string">&#x27;1234567890123456789\&#x27; AND password = &#x27;</span><span class="keyword">or</span> <span class="number">1</span>=<span class="number">1</span><span class="comment">#&#x27;</span></span><br></pre></td></tr></table></figure><p>sql注入成功。</p><h4 id="利用场景"><a href="#利用场景" class="headerlink" title="利用场景:"></a>利用场景:</h4><p>白盒审计</p><p>ctf</p><h4 id="修复建议：-12"><a href="#修复建议：-12" class="headerlink" title="修复建议："></a>修复建议：</h4><p>结合程序逻辑进行代码优化。</p><h3 id="从变量覆盖到getshell"><a href="#从变量覆盖到getshell" class="headerlink" title="从变量覆盖到getshell"></a>从变量覆盖到getshell</h3><p>[<a href="https://github.com/hongriSec/PHP-Audit-Labs/blob/master/Part1/Day14/files/README.md">红日安全]代码审计Day14 - 从变量覆盖到getshell</a></p><p><img src="https://cdn.jsdelivr.net/gh/LiAoRJ/pic/202204232044601.png"></p><p>在 <strong>第10-11行</strong> 处， <strong>Carrot</strong> 类的构造方法将超全局数组 <strong>$_GET</strong> 进行变量注册，这样即可覆盖 <strong>第8行</strong> 已定义的 <strong>$this-&gt;</strong> 变量。而在 <strong>第16行</strong> 处的析构函数中， <strong>file_put_contents</strong> 函数的第一个参数又是由 <strong>$this-&gt;</strong> 变量拼接的，这就导致我们可以控制写入文件的位置，最终造成任意文件写入问题。下面我们试着使用 <strong>payload</strong> ：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id=../<span class="keyword">var</span>/www/html/shell.php&amp;shell=<span class="string">&#x27;,)%0a&lt;?php phpinfo();?&gt;//</span></span><br></pre></td></tr></table></figure><p>shell.php文件中内容：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">array</span>(</span><br><span class="line">    <span class="string">&#x27;id&#x27;</span> =&gt; <span class="string">&#x27;../var/www/html/shell.php&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;lost&#x27;</span> =&gt; <span class="number">0</span>,</span><br><span class="line">    <span class="string">&#x27;bought&#x27;</span> =&gt; <span class="number">0</span>,</span><br><span class="line">    <span class="string">&#x27;shell&#x27;</span> =&gt; <span class="string">&#x27;\&#x27;,)</span></span><br><span class="line"><span class="string">&lt;?php phpinfo();?&gt;//&#x27;</span>,</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>这里注意，shell变量中的反斜杠\是自动加上的，是给我们传入shell参数的内容中的单引号转义的。</p><h4 id="利用场景：-12"><a href="#利用场景：-12" class="headerlink" title="利用场景："></a>利用场景：</h4><p>变脸覆盖的场景有写shell还有覆盖session登录等等</p><h4 id="修复建议：-13"><a href="#修复建议：-13" class="headerlink" title="修复建议："></a>修复建议：</h4><p>检测变量名是否为PHP原有的超全局数组，如果是则直接退出并告知变量不允许</p><h3 id="SERVER-‘PHP-SELF’-导致的防御失效问题"><a href="#SERVER-‘PHP-SELF’-导致的防御失效问题" class="headerlink" title="$_SERVER[‘PHP_SELF’]导致的防御失效问题"></a>$_SERVER[‘PHP_SELF’]导致的防御失效问题</h3><p>[<a href="https://github.com/hongriSec/PHP-Audit-Labs/blob/master/Part1/Day15/files/README.md">红日安全]代码审计Day15 - $_SERVER[‘PHP_SELF’]导致的防御失效问题</a></p><p>PHP自带的**$_SERVER[‘PHP_SELF’]** 参数是可以控制</p><p><strong>PHP_SELF</strong> 指当前的页面绝对地址，比如我们的网站：<a href="http://www.test.com/redict/index.php%EF%BC%8C%E9%82%A3%E4%B9%88**PHP_SELF**%E5%B0%B1%E6%98%AF">http://www.test.com/redict/index.php，那么**PHP_SELF**就是</a> &#x2F;redict&#x2F;index.php 。</p><p>但有个小问题很多人没有注意到，当<strong>URL</strong>是<strong>PATH_INFO</strong>的时候，比如：<a href="http://www.test.com/redict/index.php/admin%EF%BC%8C%E9%82%A3%E4%B9%88**PHP_SELF**%E5%B0%B1%E6%98%AF/redict/index.php/admin">http://www.test.com/redict/index.php/admin，那么**PHP_SELF**就是/redict/index.php/admin</a> 也就是说，其实 <strong>PHP_SELF</strong> 有一部分是我们可以控制的。</p><h4 id="利用场景：-13"><a href="#利用场景：-13" class="headerlink" title="利用场景："></a>利用场景：</h4><p>任意URL跳转</p><p>有一个关于 <strong>360webscan</strong> 的防护脚本一个历史漏洞，正是使用了 <strong>$_SERVER[‘PHP_SELF’]</strong> 这个变量，导致可以绕过360webscan防护脚本的防护，脚本的防护效果失效。</p><h4 id="修复建议：-14"><a href="#修复建议：-14" class="headerlink" title="修复建议："></a>修复建议：</h4><p>使用 <strong>$_SERVER[‘SCRIPT_NAME’]</strong> 代替即可</p><h3 id="深入理解-REQUESTS数组"><a href="#深入理解-REQUESTS数组" class="headerlink" title="深入理解$_REQUESTS数组"></a>深入理解$_REQUESTS数组</h3><p>[<a href="https://github.com/hongriSec/PHP-Audit-Labs/blob/master/Part1/Day16/files/README.md">红日安全]代码审计Day16 - 深入理解$_REQUESTS数组</a></p><p>超全局数组 <strong>$_REQUEST</strong> 中的数据，是 <strong>$_GET</strong> 、 <strong>$_POST</strong> 、 <strong>$_COOKIE</strong> 的合集，而且数据是复制过去的，并不是引用。</p><p><img src="https://cdn.jsdelivr.net/gh/LiAoRJ/pic/202204232129558.png"></p><p>所以很多时候仅仅是对**$_GET** 、 <strong>$_POST</strong>的传参做了限制，但利用时的变量确实使用**$_REQUEST**传入的，相当于并没有进行过滤。</p><h4 id="利用场景：-14"><a href="#利用场景：-14" class="headerlink" title="利用场景："></a>利用场景：</h4><p>XSS，SQL注入等</p><h4 id="修复建议：-15"><a href="#修复建议：-15" class="headerlink" title="修复建议："></a><strong>修复建议：</strong></h4><p>优化参数处理逻辑。</p><h3 id="Raw-MD5-Hash引发的注入"><a href="#Raw-MD5-Hash引发的注入" class="headerlink" title="Raw MD5 Hash引发的注入"></a>Raw MD5 Hash引发的注入</h3><p>[<a href="https://github.com/hongriSec/PHP-Audit-Labs/blob/master/Part1/Day17/files/README.md">红日安全]代码审计Day17 - Raw MD5 Hash引发的注入</a></p><blockquote><p><a href="http://php.net/manual/zh/function.md5.php">md5</a> — 计算字符串的 MD5 散列值</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">string</span> <span class="title function_ invoke__">md5</span> ( <span class="keyword">string</span> <span class="variable">$str</span> [, <span class="keyword">bool</span> <span class="variable">$raw_output</span> = <span class="literal">false</span> ] )</span><br></pre></td></tr></table></figure><p>如果可选的 <code>raw_output</code> 被设置为 <strong>TRUE</strong>，那么 MD5 报文摘要将以16字节长度的原始二进制格式返回。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/LiAoRJ/pic/202204232133969.png"></p><p>案例：</p><p><img src="https://cdn.jsdelivr.net/gh/LiAoRJ/pic/202204232134254.png"></p><p>我可以控制的点有两个变量，一个是 <strong>$user</strong> ，一个是 <strong>$pass</strong> ，**$pass** 经过了 <strong>md5</strong> 的处理，但是返回字段不是标准的md5值，**$user** 经过了 <strong>addslashes</strong> 函数的处理，无法引入特殊符号去闭合。</p><p>如果我们经过 <strong>$pass &#x3D; md5($this-&gt;password, true);</strong> 处理之后的值逃逸出一个反斜杆，那么实际上带入到数据库的值就如下所示：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select <span class="title function_ invoke__">count</span>(p) <span class="keyword">from</span> user s where password=<span class="string">&#x27;xxxxxx\&#x27; and user=&#x27;</span>xxx<span class="comment">#&#x27;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/LiAoRJ/pic/202204232135110.png" alt="3"></p><p>发现 <strong>md5(128, true)</strong> 最后的结果带有反斜杠。</p><p>payload如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">user= OR <span class="number">1</span>=<span class="number">1</span><span class="comment">#&amp;passwd=128</span></span><br></pre></td></tr></table></figure><p>带入到数据库查询的语句如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select <span class="title function_ invoke__">count</span>(p) <span class="keyword">from</span> user s where password=<span class="string">&#x27;v�a�n���l���q��\&#x27; and user=&#x27;</span> OR <span class="number">1</span>=<span class="number">1</span><span class="comment">#&#x27;</span></span><br></pre></td></tr></table></figure><h4 id="利用场景：-15"><a href="#利用场景：-15" class="headerlink" title="利用场景："></a>利用场景：</h4><p>CTF遇见过</p><h4 id="修复建议：-16"><a href="#修复建议：-16" class="headerlink" title="修复建议："></a>修复建议：</h4><p>建议在使用 <strong>md5</strong> 函数的时候，不要将 <strong>$raw_output</strong> 字段设置为<strong>true</strong> 。</p>]]></content>
      
      
      <categories>
          
          <category> 代码审计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 代码审计 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SRC姿势(二)</title>
      <link href="/2022/04/17/SRC%E5%A7%BF%E5%8A%BF(%E4%BA%8C)/"/>
      <url>/2022/04/17/SRC%E5%A7%BF%E5%8A%BF(%E4%BA%8C)/</url>
      
        <content type="html"><![CDATA[<h1 id="SRC姿势-二"><a href="#SRC姿势-二" class="headerlink" title="SRC姿势(二)"></a>SRC姿势(二)</h1><p>新增漏洞银行分享和挖百度的大佬的分享</p><p>未来将会收集点国外赏金猎人的思路。</p><p>github地址：<a href="https://github.com/LiAoRJ/src">LiAoRJ&#x2F;src: SRC姿势收集 (github.com)</a></p>]]></content>
      
      
      <categories>
          
          <category> SRC姿势 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SRC姿势 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>go免杀思路研究</title>
      <link href="/2022/04/16/go%E5%85%8D%E6%9D%80%E6%80%9D%E8%B7%AF%E7%A0%94%E7%A9%B6/"/>
      <url>/2022/04/16/go%E5%85%8D%E6%9D%80%E6%80%9D%E8%B7%AF%E7%A0%94%E7%A9%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="go免杀思路研究"><a href="#go免杀思路研究" class="headerlink" title="go免杀思路研究"></a>go免杀思路研究</h1><p>今天看了几个Go语言的免杀项目，由于这些项目发布已经有些时间了，免杀效果早已大不如前，遂想将这几个项目核心思想结合一下，生成一个新的免杀项目，这里总结一下几个项目的核心思想：</p><ol><li><p>Syscall直接系统调用</p></li><li><p>shellcode远程加载（远程加载图片中的shellcode）</p></li><li><p>shellcode混淆加密（以Base64为例）</p></li><li><p>沙箱绕过</p></li><li><p>随机变量名生成</p><span id="more"></span></li></ol><p>参考的项目如下：</p><p><a href="https://github.com/pureqh/bypassAV">pureqh&#x2F;bypassAV: 免杀shellcode加载器 (github.com)</a></p><p><a href="https://github.com/Hangingsword/HouQing">Hangingsword&#x2F;HouQing (github.com)</a></p><p><a href="https://github.com/huadema/Gobypass">huadema&#x2F;Gobypass (github.com)</a></p><p>目前火绒没绕过去。。。这令我很吃惊，360、def完美落地，火绒我研究一下，源码比较拙劣，先不放了，放张打包成exe后的VT检测图</p><p><img src="https://cdn.jsdelivr.net/gh/LiAoRJ/pic/202204162227082.png"></p>]]></content>
      
      
      <categories>
          
          <category> 免杀研究 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 免杀研究 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>重新研究一下CSRF的攻击与防御</title>
      <link href="/2022/04/14/%E9%87%8D%E6%96%B0%E7%A0%94%E7%A9%B6%E4%B8%80%E4%B8%8BCSRF%E7%9A%84%E6%94%BB%E5%87%BB%E4%B8%8E%E9%98%B2%E5%BE%A1/"/>
      <url>/2022/04/14/%E9%87%8D%E6%96%B0%E7%A0%94%E7%A9%B6%E4%B8%80%E4%B8%8BCSRF%E7%9A%84%E6%94%BB%E5%87%BB%E4%B8%8E%E9%98%B2%E5%BE%A1/</url>
      
        <content type="html"><![CDATA[<h1 id="CSRF"><a href="#CSRF" class="headerlink" title="CSRF"></a>CSRF</h1><p><strong>定义：</strong></p><p>跨站请求伪造</p><p>挟制用户在当前已登录的Web应用程序上执行非本意的操作的攻击方法</p><span id="more"></span><p><strong>对比XSS：</strong> 跟跨网站脚本(XSS)相比，XSS 利用的是用户对指定网站的信任，CSRF 利用的是网站对用户网页浏览器的信任。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>.用户C打开浏览器，访问受信任网站<span class="selector-tag">A</span>，输入用户名和密码请求登录网站<span class="selector-tag">A</span>;</span><br><span class="line"><span class="number">2</span>.在用户信息通过验证后，网站<span class="selector-tag">A</span>产生Cookie信息并返回给浏览器，此时用户登录网站<span class="selector-tag">A</span>成功，可以正常发送请求到网站<span class="selector-tag">A</span>;</span><br><span class="line"><span class="number">3</span>.用户未退出网站<span class="selector-tag">A</span>之前，在同一浏览器中，打开一个TAB页访问网站<span class="selector-tag">B</span>;</span><br><span class="line"><span class="number">4</span>.网站<span class="selector-tag">B</span>接收到用户请求后，返回一些攻击性代码，并发出一个请求要求访问第三方站点<span class="selector-tag">A</span>;</span><br><span class="line"><span class="number">5</span>.浏览器在接收到这些攻击性代码后，根据网站<span class="selector-tag">B</span>的请求，在用户不知情的情况下携带Cookie信息，向网站<span class="selector-tag">A</span>发出请求。网站<span class="selector-tag">A</span>并不知道该请求其实是由<span class="selector-tag">B</span>发起的，所以会根据用户C的Cookie信息以C的权限处理该请求，导致来自网站<span class="selector-tag">B</span>的恶意代码被执行。</span><br></pre></td></tr></table></figure><p><strong>要被CSRF攻击，必须同时满足两个条件：</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>. 登录受信任网站<span class="selector-tag">A</span>，并在本地生成Cookie。</span><br><span class="line"><span class="number">2</span>. 在不登出<span class="selector-tag">A</span>的情况下，访问危险网站<span class="selector-tag">B</span>。</span><br></pre></td></tr></table></figure><h2 id="GET型CSRF"><a href="#GET型CSRF" class="headerlink" title="GET型CSRF"></a>GET型CSRF</h2><h5 id="乌云社区某删除功能存在CSRF漏洞（简单利用需诱骗管理员触发）"><a href="#乌云社区某删除功能存在CSRF漏洞（简单利用需诱骗管理员触发）" class="headerlink" title="乌云社区某删除功能存在CSRF漏洞（简单利用需诱骗管理员触发）"></a>乌云社区某删除功能存在CSRF漏洞（简单利用需诱骗管理员触发）</h5><p><a href="https://wooyun.website/show.php?uid=S8XttXpbELTcgJTjRpr0Gq6dLdNmnRagM9rJmzPt">https://wooyun.website/show.php?uid=S8XttXpbELTcgJTjRpr0Gq6dLdNmnRagM9rJmzPt</a></p><h5 id="新浪微博某处小功能存在CSRF漏洞（可修改用户微博某元素）"><a href="#新浪微博某处小功能存在CSRF漏洞（可修改用户微博某元素）" class="headerlink" title="新浪微博某处小功能存在CSRF漏洞（可修改用户微博某元素）"></a>新浪微博某处小功能存在CSRF漏洞（可修改用户微博某元素）</h5><p><a href="https://wooyun.website/show.php?uid=6HimWDmTrwk2d0kEhtwey5NJihxQEID4pPWgrsWp">https://wooyun.website/show.php?uid=6HimWDmTrwk2d0kEhtwey5NJihxQEID4pPWgrsWp</a></p><h2 id="POST型CSRF"><a href="#POST型CSRF" class="headerlink" title="POST型CSRF"></a>POST型CSRF</h2><h5 id="中国网络电视台官方CSRF刷微博粉"><a href="#中国网络电视台官方CSRF刷微博粉" class="headerlink" title="中国网络电视台官方CSRF刷微博粉"></a>中国网络电视台官方CSRF刷微博粉</h5><p><a href="https://wooyun.website/show.php?uid=pmxEDefy2wx977fTMeNj9NCHGkxJ5eTMh3pUlXPh">https://wooyun.website/show.php?uid=pmxEDefy2wx977fTMeNj9NCHGkxJ5eTMh3pUlXPh</a></p><h5 id="新浪微博csrf刷粉丝"><a href="#新浪微博csrf刷粉丝" class="headerlink" title="新浪微博csrf刷粉丝"></a>新浪微博csrf刷粉丝</h5><p><a href="https://wooyun.website/show.php?uid=eUTLauXnYMYB2oRcmcV6F4krh3q0HyGJF9IcMnyC">https://wooyun.website/show.php?uid=eUTLauXnYMYB2oRcmcV6F4krh3q0HyGJF9IcMnyC</a></p><h2 id="补充一点东西"><a href="#补充一点东西" class="headerlink" title="补充一点东西"></a>补充一点东西</h2><h4 id="GET-CSRF使用方法"><a href="#GET-CSRF使用方法" class="headerlink" title="GET CSRF使用方法"></a>GET CSRF使用方法</h4><p>GET请求不一定必须限制为FORM表单，JS请求进行提交，img、iframe、link等标签，css属性都可以进行GET请求</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">1. script标签利用</span><br><span class="line">&lt;a <span class="attribute">href</span>=<span class="string">&quot;恶意CSRF_URL&quot;</span>&gt;请点击我</span><br><span class="line">2. iframe利用</span><br><span class="line">&lt;iframe <span class="attribute">src</span>=<span class="string">&quot;恶意CSRF_URL&quot;</span>&gt;&lt;/iframe&gt;</span><br><span class="line">3. img标签利用</span><br><span class="line">&lt;img <span class="attribute">src</span>=<span class="string">&quot;恶意CSRF_URL&quot;</span>/&gt;</span><br><span class="line">远程加载图片，这个利用点一般在引入远程图片时，例如 头像</span><br><span class="line">4.link标签利用</span><br><span class="line">&lt;link <span class="attribute">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attribute">type</span>=<span class="string">&#x27;text/css&#x27;</span> <span class="attribute">href</span>=<span class="string">&quot;恶意CSRF_URL&quot;</span>&gt;</span><br><span class="line">4. CSS - backgroud利用</span><br><span class="line">利用 CSS中 background样式中的url来加载远程机器上的内容，从而对url中的内容发送HTTP请求</span><br><span class="line">body</span><br><span class="line">&#123;background:url(<span class="string">&quot;恶意CSRF_URL&quot;</span>);&#125;</span><br></pre></td></tr></table></figure><h2 id="CSRF蠕虫"><a href="#CSRF蠕虫" class="headerlink" title="CSRF蠕虫"></a>CSRF蠕虫</h2><h5 id="音悦台一处CSRF（2）-已经证明可构造蠕虫"><a href="#音悦台一处CSRF（2）-已经证明可构造蠕虫" class="headerlink" title="音悦台一处CSRF（2）[已经证明可构造蠕虫]"></a>音悦台一处CSRF（2）[已经证明可构造蠕虫]</h5><p><a href="https://wooyun.website/show.php?uid=0uuWjJIpThFyMfSHQaiWRvV9YutUbbnmD9NAz6MD">https://wooyun.website/show.php?uid=0uuWjJIpThFyMfSHQaiWRvV9YutUbbnmD9NAz6MD</a></p><h2 id="XSS-CSRF组合拳"><a href="#XSS-CSRF组合拳" class="headerlink" title="XSS+CSRF组合拳"></a>XSS+CSRF组合拳</h2><p>普通的CSRF需要诱导受害者点击构造的CSRF连接，但当CSRF与XSS组合之后，就能实现无意识的攻击了</p><h5 id="壹心理存储型XSS-CSRF造成蠕虫攻击"><a href="#壹心理存储型XSS-CSRF造成蠕虫攻击" class="headerlink" title="壹心理存储型XSS+CSRF造成蠕虫攻击"></a>壹心理存储型XSS+CSRF造成蠕虫攻击</h5><p><a href="https://wooyun.website/show.php?uid=wWfl0XRqzAeneYfhEsjb0tmnQ71JE6xqubtOH5kl">https://wooyun.website/show.php?uid=wWfl0XRqzAeneYfhEsjb0tmnQ71JE6xqubtOH5kl</a></p><h2 id="在业界目前防御-CSRF-攻击主要有四种策略"><a href="#在业界目前防御-CSRF-攻击主要有四种策略" class="headerlink" title="在业界目前防御 CSRF 攻击主要有四种策略"></a>在业界目前防御 CSRF 攻击主要有四种策略</h2><ol><li>验证 HTTP Referer 字段；</li><li>在请求地址中添加 token 并验证；</li><li>在 HTTP 头中自定义属性并验证；</li><li>Chrome 浏览器端启用 SameSite cookie</li></ol><p>对于绕过的方法，之后再讲</p>]]></content>
      
      
      <categories>
          
          <category> 漏洞研究 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 漏洞研究 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SRC姿势(一)</title>
      <link href="/2022/04/14/SRC%E5%A7%BF%E5%8A%BF(%E4%B8%80)/"/>
      <url>/2022/04/14/SRC%E5%A7%BF%E5%8A%BF(%E4%B8%80)/</url>
      
        <content type="html"><![CDATA[<h1 id="SRC姿势-一"><a href="#SRC姿势-一" class="headerlink" title="SRC姿势(一)"></a>SRC姿势(一)</h1><p><img src="https://cdn.jsdelivr.net/gh/LiAoRJ/pic/202204141050517.png"></p><p>github地址：<a href="https://github.com/LiAoRJ/src">LiAoRJ&#x2F;src: SRC姿势收集 (github.com)</a></p>]]></content>
      
      
      <categories>
          
          <category> SRC姿势 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SRC姿势 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
