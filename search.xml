<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>SRC姿势(三)</title>
      <link href="/2022/04/24/SRC%E5%A7%BF%E5%8A%BF(%E4%B8%89)/"/>
      <url>/2022/04/24/SRC%E5%A7%BF%E5%8A%BF(%E4%B8%89)/</url>
      
        <content type="html"><![CDATA[<div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Please enter the password to read the blog." />    <label for="pass">Please enter the password to read the blog.</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none">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</div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> SRC姿势 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SRC姿势 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>游戏漏洞挖掘——待补充</title>
      <link href="/2022/04/23/%E6%B8%B8%E6%88%8F%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E2%80%94%E2%80%94%E5%BE%85%E8%A1%A5%E5%85%85/"/>
      <url>/2022/04/23/%E6%B8%B8%E6%88%8F%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E2%80%94%E2%80%94%E5%BE%85%E8%A1%A5%E5%85%85/</url>
      
        <content type="html"><![CDATA[<h1 id="游戏漏洞挖掘"><a href="#游戏漏洞挖掘" class="headerlink" title="游戏漏洞挖掘"></a>游戏漏洞挖掘</h1><h2 id="1、游戏实名认证"><a href="#1、游戏实名认证" class="headerlink" title="1、游戏实名认证"></a>1、游戏实名认证</h2><p>输入假的sfz号码 能过认证成功 &#x3D;&#x3D;漏洞</p><p>tx低危 sn高危</p>]]></content>
      
      
      <categories>
          
          <category> SRC姿势 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SRC姿势 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>红日安全代码审计学习(一)</title>
      <link href="/2022/04/20/%E7%BA%A2%E6%97%A5%E5%AE%89%E5%85%A8%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E5%AD%A6%E4%B9%A0(%E4%B8%80)/"/>
      <url>/2022/04/20/%E7%BA%A2%E6%97%A5%E5%AE%89%E5%85%A8%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E5%AD%A6%E4%B9%A0(%E4%B8%80)/</url>
      
        <content type="html"><![CDATA[<h1 id="红日安全代码审计学习"><a href="#红日安全代码审计学习" class="headerlink" title="红日安全代码审计学习"></a>红日安全代码审计学习</h1><p>项目地址：</p><p><a href="https://github.com/hongriSec/PHP-Audit-Labs#">https://github.com/hongriSec/PHP-Audit-Labs#</a></p><p>记录一下自己的学习过程</p><p>顺便加上一些自己的理解</p><span id="more"></span><h2 id="Part1"><a href="#Part1" class="headerlink" title="Part1"></a>Part1</h2><h3 id="in-array函数缺陷"><a href="#in-array函数缺陷" class="headerlink" title="in_array函数缺陷"></a><strong>in_array函数缺陷</strong></h3><p>github地址：<a href="https://github.com/hongriSec/PHP-Audit-Labs/blob/master/Part1/Day1/files/README.md">in_array函数缺陷</a></p><blockquote><p><a href="http://php.net/manual/zh/function.in-array.php"> <strong>in_array</strong> </a>：(PHP 4, PHP 5, PHP 7)</p><p><strong>功能</strong> ：检查数组中是否存在某个值</p><p><strong>定义</strong> ： <code>bool in_array ( mixed $needle , array $haystack [, bool $strict = FALSE ] )</code></p><p>在 <strong>$haystack</strong> 中搜索 <strong>$needle</strong> ，如果第三个参数 <strong>$strict</strong> 的值为 <strong>TRUE</strong> ，则 <strong>in_array()</strong> 函数会进行强检查，检查 <strong>$needle</strong> 的类型是否和 <strong>$haystack</strong> 中的相同。如果找到 <strong>$haystack</strong> ，则返回 <strong>TRUE</strong>，否则返回 <strong>FALSE</strong>。</p></blockquote><p>in_array()第三个参数未设置为true时，是弱匹配。</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">7</span><span class="keyword">shell</span>.php </span><br></pre></td></tr></table></figure><p>&#x3D;&#x3D; </p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">7 </span></span><br></pre></td></tr></table></figure><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">1</span>,<span class="number">1</span> and if(ascii(substr((select database()),<span class="number">1</span>,<span class="number">1</span>))=<span class="number">112</span>,<span class="number">1</span>,sleep(<span class="number">3</span>)));#</span><br></pre></td></tr></table></figure><p>&#x3D;&#x3D; </p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">1 </span> </span><br></pre></td></tr></table></figure><h4 id="利用场景："><a href="#利用场景：" class="headerlink" title="利用场景："></a>利用场景：</h4><p>文件上传、SQL注入白名单绕过</p><h4 id="修复建议："><a href="#修复建议：" class="headerlink" title="修复建议："></a>修复建议：</h4><p>1、第三个参数设置为 <strong>true</strong></p><p>2、使用正则匹配来处理变量</p><h3 id="filter-var函数缺陷"><a href="#filter-var函数缺陷" class="headerlink" title="filter_var函数缺陷"></a><strong>filter_var函数缺陷</strong></h3><p>github地址：<a href="https://github.com/hongriSec/PHP-Audit-Labs/blob/master/Part1/Day2/files/README.md">filter_var函数缺陷</a></p><blockquote><p><a href="http://php.net/manual/zh/function.filter-var.php"> <strong>filter_var</strong> </a>： (PHP 5 &gt;&#x3D; 5.2.0, PHP 7)</p><p><strong>功能</strong> ：使用特定的过滤器过滤一个变量</p><p><strong>定义</strong> ：<a href="http://php.net/manual/zh/language.pseudo-types.php#language.types.mixed">mixed</a> <strong>filter_var</strong> ( <a href="http://php.net/manual/zh/language.pseudo-types.php#language.types.mixed">mixed</a> <code>$variable</code> [, int <code>$filter</code> &#x3D; FILTER_DEFAULT [, <a href="http://php.net/manual/zh/language.pseudo-types.php#language.types.mixed">mixed</a> <code>$options</code> ]] )</p></blockquote><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$url = filter<span class="constructor">_var($<span class="params">_GET</span>[&#x27;<span class="params">url</span>&#x27;],FILTER_VALIDATE_URL)</span>;</span><br><span class="line">var<span class="constructor">_dump($<span class="params">url</span>)</span>;</span><br></pre></td></tr></table></figure><p>我们用<strong>FILTER_VALIDATE_URL</strong>过滤器做测试。</p><p>可以使用 <strong>:&#x2F;&#x2F;</strong> 来绕过。</p><p>由于原文没有讲清楚为什么可以绕过，本人测试了一下应该是因为filter_var函数在使用<strong>FILTER_VALIDATE_URL</strong>过滤器时，只要参数中含有 <strong>:&#x2F;&#x2F;</strong> 就视作为有效的URL。</p><p><strong><a href="http://www.baidu.com/">http://www.baidu.com</a> 是有效的URL</strong></p><p><img src="https://cdn.jsdelivr.net/gh/LiAoRJ/pic/202204202347838.png"></p><p><strong><a href="ftp://www.baidu.com是有效url/">ftp://www.baidu.com是有效URL</a></strong></p><p><img src="https://cdn.jsdelivr.net/gh/LiAoRJ/pic/202204202354607.png"></p><p><strong>0:&#x2F;&#x2F;<a href="http://www.baidu.com也是有效url,注意这个,这里可以作为一个ssrf的小trick/">www.baidu.com也是有效URL，注意这个，这里可以作为一个SSRF的小trick</a></strong></p><p><img src="https://cdn.jsdelivr.net/gh/LiAoRJ/pic/202204202355795.png"></p><p><strong>而<a href="http://www.baidu.com是无效的url/">www.baidu.com是无效的URL</a></strong></p><p><img src="https://cdn.jsdelivr.net/gh/LiAoRJ/pic/202204202356483.png"></p><h4 id="利用场景：-1"><a href="#利用场景：-1" class="headerlink" title="利用场景："></a>利用场景：</h4><p>XSS绕过</p><p>XSS场景可以使用Javascript伪协议进行绕过</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">javascript</span>://comment％<span class="number">250</span>aalert(<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p> <strong>&#x2F;&#x2F;</strong> 在JavaScript中表示单行注释， 对**%** 百分号编码成 <strong>%25</strong>，我们这里用了字符 <strong>%0a</strong> ，该字符为换行符，所以 <strong>alert</strong> 语句与注释符 <strong>&#x2F;&#x2F;</strong> 就不在同一行</p><p>程序将浏览器发来的payload：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">javascript</span>://comment％<span class="number">250</span>aalert(<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p> 先解码成： </p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">javascript</span>://comment%<span class="number">0</span>aalert(<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p> 存储在可回显在页面上变量中，然后用户点击就会触发<strong>alert</strong>函数，弹窗。</p><p><strong>SSRF trick</strong></p><p><strong>看这篇文章</strong></p><p><a href="https://www.anquanke.com/post/id/101058">https://www.anquanke.com/post/id/101058</a></p><h4 id="修复建议：-1"><a href="#修复建议：-1" class="headerlink" title="修复建议："></a>修复建议：</h4><p>对于XSS的话，最好是过滤关键词+实体化编码。</p><p>对于ssrf的话，建议正则匹配吧。</p><h3 id="实例化任意对象漏洞"><a href="#实例化任意对象漏洞" class="headerlink" title="实例化任意对象漏洞"></a>实例化任意对象漏洞</h3><p>[<a href="https://github.com/hongriSec/PHP-Audit-Labs/blob/master/Part1/Day3/files/README.md">红日安全]代码审计Day3 - 实例化任意对象漏洞</a></p><p>这个漏洞类似于php任意代码执行了</p><p><img src="https://cdn.jsdelivr.net/gh/LiAoRJ/pic/202204210028203.png"></p><p>实例化类的类名和传入类的参数均在用户的控制之下，攻击者可以通过该漏洞，调用PHP代码库的任意构造函数。即使代码本身不包含易受攻击的构造函数，我们也可以使用PHP的内置类 <strong>SimpleXMLElement</strong> 来进行 <strong>XXE</strong> 攻击，进而读取目标文件的内容，甚至命令执行。</p><p>先看看 <strong>SimpleXMLElement</strong> 类的定义：</p><blockquote><p><a href="http://php.net/manual/zh/class.simplexmlelement.php">SimpleXMLElement</a> ：(PHP 5, PHP 7)</p><p><strong>功能</strong> ：用来表示XML文档中的元素，为PHP的内置类。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/LiAoRJ/pic/202204210103549.png"></p><p>data：格式正确的XML字符串，当参数<code>data_is_url</code>是<code>True</code>时，传入一个URL字符串</p><p>options：（可选）用于指定其他Libxml参数。</p><p><strong>SimpleXMLElement</strong> 导致的XXE攻击：</p><p><img src="https://cdn.jsdelivr.net/gh/LiAoRJ/pic/202204210034481.png"></p><h4 id="利用场景：-2"><a href="#利用场景：-2" class="headerlink" title="利用场景："></a>利用场景：</h4><p>XXE</p><h4 id="修复建议：-2"><a href="#修复建议：-2" class="headerlink" title="修复建议："></a>修复建议：</h4><p>可以修改代码，不要用这种可控的参数形式。</p><p>然后提一下对XXE漏洞进行修复，可以禁止加载XML实体对象。</p><h3 id="strpos使用不当引发漏洞"><a href="#strpos使用不当引发漏洞" class="headerlink" title="strpos使用不当引发漏洞"></a>strpos使用不当引发漏洞</h3><p>[<a href="https://github.com/hongriSec/PHP-Audit-Labs/blob/master/Part1/Day4/files/README.md">红日安全]代码审计Day4 - strpos使用不当引发漏洞</a>&#96;</p><p>结合具体场景代码</p><p><img src="https://cdn.jsdelivr.net/gh/LiAoRJ/pic/202204220113952.png"></p><p>代码在 <strong>第8行</strong> 和 <strong>第9行</strong> 使用 <strong>strpos</strong> 函数来防止输入的参数含有 &lt; 和 &gt; 符号，猜测开发者应该是考虑到非法字符注入问题。</p><blockquote><p><strong><a href="http://php.net/manual/zh/function.strpos.php">strpos</a></strong> — 查找字符串首次出现的位置</p><p>作用：主要是用来查找字符在字符串中首次出现的位置。</p><p>结构：<code>int strpos ( string $haystack , mixed $needle [, int $offset = 0 ] )</code></p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">strpos</span>(<span class="string">&#x27;abcd&#x27;</span>,<span class="string">&#x27;a&#x27;</span>));   <span class="comment">#0</span></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">strpos</span>(<span class="string">&#x27;abcd&#x27;</span>,<span class="string">&#x27;x&#x27;</span>));   <span class="comment">#false</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>上面场景代码中核心判断代码是</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(!strpos($user,&#x27;&lt;&#x27;) || !strpos($user,&#x27;&gt;&#x27;)) &amp;&amp; (!strpos($pass,&#x27;&lt;&#x27;) || !strpos($pass,&#x27;&gt;&#x27;))</span><br></pre></td></tr></table></figure><p>作者考虑到可能有黑客会在登陆点进行SQL注入测试，所以判断了一下是否出现 <strong>‘&lt;’** 或 **’&gt;’</strong> 若出现则strpos函数获得出现位置，再配合  <strong>!</strong>  取反得到false</p><p>先不说strpos函数的问题，这段代码的逻辑就有问题，如果$user只出现了&gt;或&lt;号但$pass没有出现&gt;或&lt;号，那么依然可以判定成功。</p><p>例如这样</p><p><img src="https://cdn.jsdelivr.net/gh/LiAoRJ/pic/202204220131557.png"></p><p>再说回strpos函数的绕过，因为strpos函数是取字符位置，但是如果取到了位置为<strong>0</strong>，那么通过！取反得到的就会是<strong>true</strong>了，就会导致判断成功，代码如下</p><p><img src="https://cdn.jsdelivr.net/gh/LiAoRJ/pic/202204220134822.png"></p><h4 id="利用场景：-3"><a href="#利用场景：-3" class="headerlink" title="利用场景："></a>利用场景：</h4><p>ctf印象中见过</p><h4 id="修复建议：-3"><a href="#修复建议：-3" class="headerlink" title="修复建议："></a>修复建议：</h4><p>代码逻辑优化</p><p>或者登录验证那块不要这么写了（真要防止SQL注入，这样写会不会太儿戏了。。。）</p><h3 id="escapeshellarg与escapeshellcmd使用不当"><a href="#escapeshellarg与escapeshellcmd使用不当" class="headerlink" title="escapeshellarg与escapeshellcmd使用不当"></a>escapeshellarg与escapeshellcmd使用不当</h3><p>[<a href="https://github.com/hongriSec/PHP-Audit-Labs/blob/master/Part1/Day5/files/README.md">红日安全]代码审计Day5 - escapeshellarg与escapeshellcmd使用不当</a></p><p>原理：</p><p><strong>escapeshellarg()</strong> </p><p>将转码任何已经存在的单引号</p><p>例如：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$test</span> = <span class="string">&quot;127.0.0.1&#x27; -v -d a=1&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span>(<span class="title function_ invoke__">escapeshellarg</span>(<span class="variable">$test</span>));</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;127.0.0.1&#x27;</span>\<span class="string">&#x27;&#x27;</span> -v -d a=<span class="number">1</span><span class="string">&#x27;</span></span><br></pre></td></tr></table></figure><p>这里稍微解释一下</p><p>其实是变成了三个字符串的连接</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;127.0.0.1&#x27;</span></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\<span class="string">&#x27; #这里是escapeshellarg函数的效果 原来的单引号前面加上\转义</span></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;-v -d a=1&#x27;</span></span><br></pre></td></tr></table></figure><p><strong>escapeshellcmd</strong>函数</p><p><strong>escapeshellcmd()</strong> 对字符串中可能会欺骗  shell 命令执行任意命令的字符进行转义。</p><p>反斜线（\）会在以下字符之前插入：   <code>&amp;#;</code>|*?~&lt;&gt;^()[]{}$`, <code>\x0A</code>   和 <code>\xFF</code>。 <code>&#39;</code> 和 <code>&quot;</code>   仅在不配对儿的时候被转义。   </p><p>当**escapeshellarg()<strong>与</strong>escapeshellcmd()**一起使用时就会出现参数逃逸漏洞</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$test</span> = <span class="string">&quot;127.0.0.1&#x27; -v -d a=1&quot;</span>;</span><br><span class="line"><span class="variable">$test2</span> = <span class="title function_ invoke__">escapeshellarg</span>(<span class="variable">$test</span>);</span><br><span class="line"><span class="keyword">echo</span>(<span class="title function_ invoke__">escapeshellcmd</span>(<span class="variable">$test2</span>));</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;127.0.0.1&#x27;</span>\\<span class="string">&#x27;&#x27;</span> -v -d a=<span class="number">1</span>\<span class="string">&#x27;</span></span><br></pre></td></tr></table></figure><p>依然是变成了三个部分</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;1270.0.1&#x27;</span> <span class="comment">#没有发生转义 单引号是配对的</span></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\\<span class="string">&#x27;&#x27;</span>  <span class="comment">#从之前的\&#x27; 变成 \\&#x27; 这回是反斜线被转义了 所以单引号是多出来的正好与之前的第三部分的第一个单引号配对了</span></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-v -d a=<span class="number">1</span>\<span class="string">&#x27; #因为第二部分配对了 导致第三部分的单引号多余了 所以根据函数规则 未匹配的单引号会加上反斜线转义</span></span><br></pre></td></tr></table></figure><h4 id="利用场景：-4"><a href="#利用场景：-4" class="headerlink" title="利用场景："></a>利用场景：</h4><p>参数逃逸导致远程代码执行</p><p>ctf也有遇到过</p><h4 id="修复建议：-4"><a href="#修复建议：-4" class="headerlink" title="修复建议："></a>修复建议：</h4><p>不建议大家同时使用 <strong>escapeshellcmd()</strong> 和 <strong>escapeshellarg()</strong> 函数对参数进行过滤</p><h3 id="正则使用不当导致的路径穿越问题"><a href="#正则使用不当导致的路径穿越问题" class="headerlink" title="正则使用不当导致的路径穿越问题"></a>正则使用不当导致的路径穿越问题</h3><p>[<a href="https://github.com/hongriSec/PHP-Audit-Labs/blob/master/Part1/Day6/files/README.md">红日安全]代码审计Day6 - 正则使用不当导致的路径穿越问题</a></p><blockquote><p><a href="http://php.net/manual/zh/function.preg-replace.php"><strong>preg_replace</strong></a>：(PHP 4, PHP 5, PHP 7)</p><p><strong>功能</strong> ： 函数执行一个正则表达式的搜索和替换</p><p><strong>定义</strong> ： <code>mixed preg_replace ( mixed $pattern , mixed $replacement , mixed $subject [, int $limit = -1 [, int &amp;$count ]] )</code></p><p>搜索 <strong>subject</strong> 中匹配 <strong>pattern</strong> 的部分， 如果匹配成功将其替换成 <strong>replacement</strong> 。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/LiAoRJ/pic/202204230021968.png"></p><p>本质上是对正则表达式的绕过</p><p><strong>preg_replace</strong> 中的 <strong>pattern</strong> 部分 ，该正则表达式并未起到过滤目录路径字符的作用。<code>[^a-z.-_]</code>  表示匹配除了 <strong>a</strong> 字符到 <strong>z</strong> 字符、**.** 字符到 <strong>_</strong> 字符之间的所有字符。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">../../ config.php</span><br></pre></td></tr></table></figure><p>即可删除config.php文件</p><h4 id="利用场景：-5"><a href="#利用场景：-5" class="headerlink" title="利用场景："></a>利用场景：</h4><p>本质是对正则的绕过，只要正则写的不完善，都可以进行绕过尝试。</p><p>CTF中也有出现过。</p><h4 id="修复建议：-5"><a href="#修复建议：-5" class="headerlink" title="修复建议："></a>修复建议：</h4><p>结合业务修改完善正则表达式。</p><h3 id="parse-str函数缺陷"><a href="#parse-str函数缺陷" class="headerlink" title="parse_str函数缺陷"></a>parse_str函数缺陷</h3><p>[<a href="https://github.com/hongriSec/PHP-Audit-Labs/blob/master/Part1/Day7/files/README.md">红日安全]代码审计Day7 - parse_str函数缺陷</a></p><p>这个函数的缺陷实际上导致的是一个<strong>变量覆盖</strong>漏洞。</p><blockquote><p><a href="http://php.net/manual/zh/function.parse-str.php"> <strong>parse_str</strong> </a></p><p><strong>功能</strong> ：parse_str的作用就是解析字符串并且注册成变量，它在注册变量之前不会验证当前变量是否存在，所以会直接覆盖掉当前作用域中原有的变量。</p><p><strong>定义</strong> ：<code>void parse_str( string $encoded_string [, array &amp;$result ] )</code></p><p>如果 <strong>encoded_string</strong> 是 URL 传入的查询字符串（query string），则将它解析为变量并设置到当前作用域（如果提供了 result 则会设置到该数组里 ）。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/LiAoRJ/pic/202204230119878.png"></p><h4 id="利用场景：-6"><a href="#利用场景：-6" class="headerlink" title="利用场景："></a>利用场景：</h4><p>白盒审计</p><p>ctf遇到过</p><h4 id="修复建议：-6"><a href="#修复建议：-6" class="headerlink" title="修复建议："></a>修复建议：</h4><p>在注册变量前先判断变量是否存在</p><h3 id="preg-replace函数之命令执行"><a href="#preg-replace函数之命令执行" class="headerlink" title="preg_replace函数之命令执行"></a>preg_replace函数之命令执行</h3><p>[<a href="https://github.com/hongriSec/PHP-Audit-Labs/blob/master/Part1/Day8/files/README.md">红日安全]代码审计Day8 - preg_replace函数之命令执行</a></p><blockquote><p><a href="http://php.net/manual/zh/function.preg-replace.php"><strong>preg_replace</strong></a>：(PHP 5.5)</p><p><strong>功能</strong> ： 函数执行一个正则表达式的搜索和替换</p><p><strong>定义</strong> ： <code>mixed preg_replace ( mixed $pattern , mixed $replacement , mixed $subject [, int $limit = -1 [, int &amp;$count ]] )</code></p><p>搜索 <strong>subject</strong> 中匹配 <strong>pattern</strong> 的部分， 如果匹配成功以 <strong>replacement</strong> 进行替换</p></blockquote><ul><li><strong>$pattern</strong> 存在 <strong>&#x2F;e</strong> 模式修正符，允许代码执行</li><li><strong>&#x2F;e</strong> 模式修正符，是 **preg_replace() ** 将 <strong>$replacement</strong> 当做php代码来执行</li></ul><p>总结就是 php5.5版本以下，<strong>preg_replace</strong>函数有一个&#x2F;e模式，开启了就会导致代码执行。</p><p><strong>经典问题案例：</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">header</span>(<span class="string">&quot;Content-Type: text/plain&quot;</span>);</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">complexStrtolower</span>(<span class="params"> <span class="variable">$regex</span>, <span class="variable">$value</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/(&#x27;</span>. <span class="variable">$regex</span>.<span class="string">&#x27;)/ei&#x27;</span>,<span class="string">&#x27;strtolower(&quot;\1&quot;)&#x27;</span>,<span class="variable">$value</span>);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">foreach</span> (<span class="variable">$_GET</span> <span class="keyword">as</span> <span class="variable">$regex</span> =&gt; <span class="variable">$value</span>)&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="title function_ invoke__">complexStrtolower</span>(<span class="variable">$regex</span>, <span class="variable">$value</span>).<span class="string">&quot;n&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>preg_replace 使用了 &#x2F;e 模式，导致可以代码执行，我们可以控制第一个和第三个参数，第二个参数固定为 ‘strtolower(“\1”)’ 字符串。</p><p>上面的命令执行，相当于 <strong>eval(‘strtolower(“\1”);’)</strong></p><p>如何进行命令执行其他恶意代码？</p><p>这里要用到一个PHP的小<strong>trick</strong>，<strong>反向引用</strong>。</p><p>看了几篇文章，感觉讲的不是很清楚，这里解释一下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">反向引用</span><br><span class="line">对一个正则表达式模式或部分模式 两边添加圆括号 将导致相关 匹配存储到一个临时缓冲区 中，</span><br><span class="line">所捕获的每个子匹配都按照在正则表达式模式中从左到右出现的顺序存储。</span><br><span class="line">缓冲区编号从 1 开始，最多可存储 99 个捕获的子表达式。每个缓冲区都可以使用 <span class="string">&#x27;\n&#x27;</span> 访问，</span><br><span class="line">其中 n 为一个标识特定缓冲区的一位或两位十进制数。</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">camelize</span>(<span class="params"><span class="variable">$word</span></span>) </span>&#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/(^|_)([a-z])/e&#x27;</span>, <span class="string">&#x27;strtoupper(&quot;\2&quot;)&#x27;</span>, <span class="variable">$word</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面这段代码，就是捕获匹配的 <code>(^|_)</code> 和 <code>([a-z])</code> 部分。它们从 1 开始编号，因此您有反向引用 1 和 2。</p><p>1是正则  **(^|_) ** 所匹配到的东西，2是  <strong>([a-z])</strong>  所匹配到的东西。这里还有一个隐藏点 <strong>0 是整个匹配的字符串</strong> 很多文章没讲到这个。</p><p>回到上面的代码中</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/(&#x27;</span>. <span class="variable">$regex</span>.<span class="string">&#x27;)/ei&#x27;</span>,<span class="string">&#x27;strtolower(&quot;\1&quot;)&#x27;</span>,<span class="variable">$value</span>);</span><br></pre></td></tr></table></figure><p>第二个参数中的\\1，实际上就是\1，配合反向引用的规则，\1就是指第一个子匹配项。</p><p>那上面的命令执行，就相当于 <strong>eval(‘strtolower(“满足正则表达式的$value”);’)</strong></p><p>官方 <strong>payload</strong> 为： <strong>&#x2F;?.*&#x3D;{${phpinfo()}}</strong></p><p><strong>.</strong>* 正则匹配任意多个字符</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">原先的语句： <span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/(&#x27;</span> . <span class="variable">$regex</span> . <span class="string">&#x27;)/ei&#x27;</span>, <span class="string">&#x27;strtolower(&quot;\\1&quot;)&#x27;</span>, <span class="variable">$value</span>);</span><br><span class="line">变成了语句： <span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/(.*)/ei&#x27;</span>, <span class="string">&#x27;strtolower(&quot;\\1&quot;)&#x27;</span>, &#123;$&#123;<span class="title function_ invoke__">phpinfo</span>()&#125;&#125;);</span><br></pre></td></tr></table></figure><p>但是这个payload是有问题的</p><p>以**.<em><strong>作为参数名是非法的，会自动转化成</strong>_</em>**</p><p><img src="https://cdn.jsdelivr.net/gh/LiAoRJ/pic/202204231609346.png"></p><p>图片来自：<a href="https://www.cnblogs.com/HelloCTF/p/13184476.html">https://www.cnblogs.com/HelloCTF/p/13184476.html</a></p><p>稍微修改以下payload即可</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\S*=<span class="variable">$&#123;phpinfo()&#125;</span></span><br></pre></td></tr></table></figure><p><strong>\S</strong>* 正则匹配任意多个非空白符</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">`\C`、`\D`、`\H`、`\N`、`\S`、`\V`、`\X` 都能代替</span><br></pre></td></tr></table></figure><p>匹配到 <strong>{${phpinfo()}}</strong> 或者 <strong>${phpinfo()}</strong> ，才能执行 phpinfo 函数，这是一个小坑。这实际上是 PHP可变变量 的原因。在PHP中双引号包裹的字符串中可以解析变量，而单引号则不行。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="variable">$a</span> = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;a=<span class="subst">$a</span>&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;a=$a&#x27;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a=hello </span><br><span class="line">a=<span class="variable">$a</span></span><br></pre></td></tr></table></figure><p>为什么要匹配到 <strong>{${phpinfo()}}</strong> 或者 <strong>${phpinfo()}</strong> ，才能执行 <strong>phpinfo</strong> 函数，这是一个小坑。这实际上是 <a href="http://php.net/manual/zh/language.variables.variable.php">PHP可变变量</a> 的原因。在PHP中双引号包裹的字符串中可以解析变量，而单引号则不行。 <strong>${phpinfo()}</strong> 中的 <strong>phpinfo()</strong> 会被当做变量先执行，执行后，即变成 <strong>${1}</strong> (phpinfo()成功执行返回true)。</p><h4 id="利用场景：-7"><a href="#利用场景：-7" class="headerlink" title="利用场景："></a>利用场景：</h4><p>PHP版本有限制，可能见到的机会不多。</p><p>ctf出现过作为考点的题目</p><h4 id="修复建议：-7"><a href="#修复建议：-7" class="headerlink" title="修复建议："></a>修复建议：</h4><p>避免使用 <strong>&#x2F;e</strong> 模式修正符</p><h3 id="str-replace函数过滤不当"><a href="#str-replace函数过滤不当" class="headerlink" title="str_replace函数过滤不当"></a>str_replace函数过滤不当</h3><p>[<a href="https://github.com/hongriSec/PHP-Audit-Labs/blob/master/Part1/Day9/files/README.md">红日安全]代码审计Day9 - str_replace函数过滤不当</a></p><blockquote><p><a href="http://php.net/manual/zh/function.str-replace.php"> str_replace </a>：(PHP 4, PHP 5, PHP 7)</p><p><strong>功能</strong> ：子字符串替换</p><p><strong>定义</strong> ： <code>mixed str_replace ( mixed $search , mixed $replace , mixed $subject [, int &amp;$count ] )</code></p><p>该函数返回一个字符串或者数组。如下：</p><p>str_replace(字符串1，字符串2，字符串3)：将字符串3中出现的所有字符串1换成字符串2。</p><p>str_replace(数组1，字符串1，字符串2)：将字符串2中出现的所有数组1中的值，换成字符串1。</p><p>str_replace(数组1，数组2，字符串1)：将字符串1中出现的所有数组1一一对应，替换成数组2的值，多余的替换成空字符串。</p></blockquote><p>本质是过滤不严谨</p><p><img src="https://cdn.jsdelivr.net/gh/LiAoRJ/pic/202204231919587.png"></p><p>以上代码是将 <strong>..&#x2F;</strong> 字符替换成空，然后进行路径拼接</p><p>payload：**….&#x2F;&#x2F;** 或者 <strong>…&#x2F;.&#x2F;</strong> ，在经过程序的 <strong>str_replace</strong> 函数处理后，都会变成 <strong>..&#x2F;</strong> </p><h4 id="利用场景：-8"><a href="#利用场景：-8" class="headerlink" title="利用场景："></a>利用场景：</h4><p>任意文件读取，任意文件删除……</p><h4 id="修复建议：-8"><a href="#修复建议：-8" class="headerlink" title="修复建议："></a>修复建议：</h4><p>结合业务场景进行过滤</p><h3 id="程序未恰当exit导致的问题"><a href="#程序未恰当exit导致的问题" class="headerlink" title="程序未恰当exit导致的问题"></a>程序未恰当exit导致的问题</h3><p>[<a href="https://github.com/hongriSec/PHP-Audit-Labs/blob/master/Part1/Day10/files/README.md">红日安全]代码审计Day10 - 程序未恰当exit导致的问题</a></p><p>本质上代码逻辑有问题，在本应该立即exit退出的地方，没有退出函数，使得程序继续运行，出现非预期的情况。</p><h4 id="利用场景：-9"><a href="#利用场景：-9" class="headerlink" title="利用场景："></a>利用场景：</h4><p>重装漏洞</p><h4 id="修复建议：-9"><a href="#修复建议：-9" class="headerlink" title="修复建议："></a>修复建议：</h4><p>在正确的地方退出程序即可，使用 <strong>die</strong> 、 <strong>exit</strong> 等函数。</p><h3 id="unserialize反序列化漏洞"><a href="#unserialize反序列化漏洞" class="headerlink" title="unserialize反序列化漏洞"></a>unserialize反序列化漏洞</h3><p>[<a href="https://github.com/hongriSec/PHP-Audit-Labs/blob/master/Part1/Day11/files/README.md">红日安全]代码审计Day11 - unserialize反序列化漏洞</a></p><p>这个可以说是打ctf之前经常能见到。</p><p>这里直接推几篇文章</p><p>这一篇就够了</p><p><a href="https://blog.csdn.net/solitudi/article/details/113588692">https://blog.csdn.net/solitudi/article/details/113588692</a></p><h4 id="利用场景：-10"><a href="#利用场景：-10" class="headerlink" title="利用场景："></a>利用场景：</h4><p>构造POP链rce</p><p>ctf</p><h4 id="修复建议：-10"><a href="#修复建议：-10" class="headerlink" title="修复建议："></a>修复建议：</h4><p>不要把用户的输入或者是用户可控的参数值直接放进反序列化的操作中</p><h3 id="误用htmlentities函数引发的漏洞"><a href="#误用htmlentities函数引发的漏洞" class="headerlink" title="误用htmlentities函数引发的漏洞"></a>误用htmlentities函数引发的漏洞</h3><p>[<a href="https://github.com/hongriSec/PHP-Audit-Labs/blob/master/Part1/Day12/files/README.md">红日安全]代码审计Day12 - 误用htmlentities函数引发的漏洞</a></p><blockquote><p><a href="http://php.net/manual/zh/function.htmlentities.php">htmlentities</a> — 将字符转换为 HTML 转义字符</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">string</span> <span class="title function_ invoke__">htmlentities</span> ( <span class="keyword">string</span> <span class="variable">$string</span> [, <span class="keyword">int</span> <span class="variable">$flags</span> = ENT_COMPAT | ENT_HTML401 [, <span class="keyword">string</span> <span class="variable">$encoding</span> = <span class="title function_ invoke__">ini_get</span>(<span class="string">&quot;default_charset&quot;</span>) [, <span class="keyword">bool</span> <span class="variable">$double_encode</span> = <span class="literal">true</span> ]]] )</span><br></pre></td></tr></table></figure><p>作用：在写PHP代码时，不能在字符串中直接写实体字符，PHP提供了一个将HTML特殊字符转换成实体字符的函数 htmlentities()。</p></blockquote><p>注：<strong>htmlentities()</strong> 并不能转换所有的特殊字符，是转换除了空格之外的特殊字符，且单引号和双引号需要单独控制（通过第二个参数）。第2个参数取值有3种，分别如下：</p><ul><li>ENT_COMPAT（默认值）：只转换双引号。</li><li>ENT_QUOTES：两种引号都转换。</li><li>ENT_NOQUOTES：两种引号都不转换。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/LiAoRJ/pic/202204231947807.png"></p><h4 id="利用场景：-11"><a href="#利用场景：-11" class="headerlink" title="利用场景："></a>利用场景：</h4><p>当参数没设置清楚会导致出现SQL注入、XSS。</p><h4 id="修复建议：-11"><a href="#修复建议：-11" class="headerlink" title="修复建议："></a>修复建议：</h4><p><strong>htmlentities</strong> 这个函数使用的时候，尽量加上可选参数，并且选择 <strong>ENT_QUOTES</strong> 转换单引号和双引号 参数。</p><h3 id="特定场合下addslashes函数的绕过"><a href="#特定场合下addslashes函数的绕过" class="headerlink" title="特定场合下addslashes函数的绕过"></a>特定场合下addslashes函数的绕过</h3><p>[<a href="https://github.com/hongriSec/PHP-Audit-Labs/blob/master/Part1/Day13/files/README.md">红日安全]代码审计Day13 - 特定场合下addslashes函数的绕过</a></p><blockquote><p><a href="http://php.net/manual/zh/function.addslashes.php">addslashes</a> — 使用反斜线引用字符串</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">string</span> addslashes ( <span class="built_in">string</span> $str )</span><br></pre></td></tr></table></figure><p>作用：在单引号（’）、双引号（”）、反斜线（\）与 NULL（ <strong>NULL</strong> 字符）字符之前加上反斜线。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/LiAoRJ/pic/202204231952107.png"></p><p>具体案例：</p><p><img src="https://cdn.jsdelivr.net/gh/LiAoRJ/pic/202204231956690.png"></p><p>代码 <strong>第33行</strong> ，通过 <strong>POST</strong> 方式传入 <strong>user</strong> 和 <strong>passwd</strong> 两个参数，通过 <strong>isValid()</strong> 来判断登陆是否合法。我们跟进一下 <strong>isValid()</strong> 这个函数，该函数主要功能代码在 <strong>第12行-第22行</strong> ，我们看到 <strong>13行</strong> 和 <strong>14行</strong> 调用 <strong>sanitizeInput()</strong> 针对 <strong>user</strong> 和 <strong>password</strong> 进行相关处理。</p><p>跟进一下 <strong>sanitizeInput()</strong> ，主要功能代码在 <strong>第24行-第29行</strong> ，这里针对输入的数据调用 <strong>addslashes</strong> 函数进行处理，然后再针对处理后的内容进行长度的判断，如果长度大于20，就只截取前20个字符。</p><p>滤了单引号，正常情况下是没有注入了，那为什么还能导致注入了，原因实际上出在了 <strong>substr</strong> 函数</p><blockquote><p><a href="http://php.net/manual/zh/function.substr.php">substr</a> — 返回字符串的子串</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">string</span> substr ( <span class="built_in">string</span> $string , <span class="built_in">int</span> $start [, <span class="built_in">int</span> $length ] )</span><br></pre></td></tr></table></figure><p>作用：返回字符串 <code>string</code> 由 <code>start</code> 和 <code>length</code> 参数指定的子字符串。</p></blockquote><p>代码中length默认为20</p><p>我们里可以用他默认的长度为20，设计一个payload</p><p>正常情况输入</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">user=<span class="number">1234567890123456789</span><span class="string">&#x27;</span></span><br></pre></td></tr></table></figure><p>会被转换成</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">user=<span class="number">1234567890123456789</span>\<span class="string">&#x27;</span></span><br></pre></td></tr></table></figure><p>但是经过substr函数的截取</p><p>又变成了</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">user</span><span class="operator">=</span><span class="number">1234567890123456789</span>\</span><br></pre></td></tr></table></figure><p>再结合具体代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select <span class="title function_ invoke__">count</span>(p) <span class="keyword">from</span> user u where user = <span class="string">&#x27;1234567890123456789\&#x27; AND password = &#x27;</span><span class="variable">$pass</span><span class="string">&#x27;</span></span><br></pre></td></tr></table></figure><p>\将本来是用来闭合user的单引号转义成了正常的单引号，所以签名的单引号与$pass的前一个单引号进行了闭合。</p><p>这里我们让 <strong>pass&#x3D;or 1&#x3D;1#</strong> ，那么最后的sql语句如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select <span class="title function_ invoke__">count</span>(p) <span class="keyword">from</span> user where user = <span class="string">&#x27;1234567890123456789\&#x27; AND password = &#x27;</span><span class="keyword">or</span> <span class="number">1</span>=<span class="number">1</span><span class="comment">#&#x27;</span></span><br></pre></td></tr></table></figure><p>sql注入成功。</p><h4 id="利用场景"><a href="#利用场景" class="headerlink" title="利用场景:"></a>利用场景:</h4><p>白盒审计</p><p>ctf</p><h4 id="修复建议：-12"><a href="#修复建议：-12" class="headerlink" title="修复建议："></a>修复建议：</h4><p>结合程序逻辑进行代码优化。</p><h3 id="从变量覆盖到getshell"><a href="#从变量覆盖到getshell" class="headerlink" title="从变量覆盖到getshell"></a>从变量覆盖到getshell</h3><p>[<a href="https://github.com/hongriSec/PHP-Audit-Labs/blob/master/Part1/Day14/files/README.md">红日安全]代码审计Day14 - 从变量覆盖到getshell</a></p><p><img src="https://cdn.jsdelivr.net/gh/LiAoRJ/pic/202204232044601.png"></p><p>在 <strong>第10-11行</strong> 处， <strong>Carrot</strong> 类的构造方法将超全局数组 <strong>$_GET</strong> 进行变量注册，这样即可覆盖 <strong>第8行</strong> 已定义的 <strong>$this-&gt;</strong> 变量。而在 <strong>第16行</strong> 处的析构函数中， <strong>file_put_contents</strong> 函数的第一个参数又是由 <strong>$this-&gt;</strong> 变量拼接的，这就导致我们可以控制写入文件的位置，最终造成任意文件写入问题。下面我们试着使用 <strong>payload</strong> ：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id=../<span class="keyword">var</span>/www/html/shell.php&amp;shell=<span class="string">&#x27;,)%0a&lt;?php phpinfo();?&gt;//</span></span><br></pre></td></tr></table></figure><p>shell.php文件中内容：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">array</span>(</span><br><span class="line">    <span class="string">&#x27;id&#x27;</span> =&gt; <span class="string">&#x27;../var/www/html/shell.php&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;lost&#x27;</span> =&gt; <span class="number">0</span>,</span><br><span class="line">    <span class="string">&#x27;bought&#x27;</span> =&gt; <span class="number">0</span>,</span><br><span class="line">    <span class="string">&#x27;shell&#x27;</span> =&gt; <span class="string">&#x27;\&#x27;,)</span></span><br><span class="line"><span class="string">&lt;?php phpinfo();?&gt;//&#x27;</span>,</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>这里注意，shell变量中的反斜杠\是自动加上的，是给我们传入shell参数的内容中的单引号转义的。</p><h4 id="利用场景：-12"><a href="#利用场景：-12" class="headerlink" title="利用场景："></a>利用场景：</h4><p>变脸覆盖的场景有写shell还有覆盖session登录等等</p><h4 id="修复建议：-13"><a href="#修复建议：-13" class="headerlink" title="修复建议："></a>修复建议：</h4><p>检测变量名是否为PHP原有的超全局数组，如果是则直接退出并告知变量不允许</p><h3 id="SERVER-‘PHP-SELF’-导致的防御失效问题"><a href="#SERVER-‘PHP-SELF’-导致的防御失效问题" class="headerlink" title="$_SERVER[‘PHP_SELF’]导致的防御失效问题"></a>$_SERVER[‘PHP_SELF’]导致的防御失效问题</h3><p>[<a href="https://github.com/hongriSec/PHP-Audit-Labs/blob/master/Part1/Day15/files/README.md">红日安全]代码审计Day15 - $_SERVER[‘PHP_SELF’]导致的防御失效问题</a></p><p>PHP自带的**$_SERVER[‘PHP_SELF’]** 参数是可以控制</p><p><strong>PHP_SELF</strong> 指当前的页面绝对地址，比如我们的网站：<a href="http://www.test.com/redict/index.php%EF%BC%8C%E9%82%A3%E4%B9%88**PHP_SELF**%E5%B0%B1%E6%98%AF">http://www.test.com/redict/index.php，那么**PHP_SELF**就是</a> &#x2F;redict&#x2F;index.php 。</p><p>但有个小问题很多人没有注意到，当<strong>URL</strong>是<strong>PATH_INFO</strong>的时候，比如：<a href="http://www.test.com/redict/index.php/admin%EF%BC%8C%E9%82%A3%E4%B9%88**PHP_SELF**%E5%B0%B1%E6%98%AF/redict/index.php/admin">http://www.test.com/redict/index.php/admin，那么**PHP_SELF**就是/redict/index.php/admin</a> 也就是说，其实 <strong>PHP_SELF</strong> 有一部分是我们可以控制的。</p><h4 id="利用场景：-13"><a href="#利用场景：-13" class="headerlink" title="利用场景："></a>利用场景：</h4><p>任意URL跳转</p><p>有一个关于 <strong>360webscan</strong> 的防护脚本一个历史漏洞，正是使用了 <strong>$_SERVER[‘PHP_SELF’]</strong> 这个变量，导致可以绕过360webscan防护脚本的防护，脚本的防护效果失效。</p><h4 id="修复建议：-14"><a href="#修复建议：-14" class="headerlink" title="修复建议："></a>修复建议：</h4><p>使用 <strong>$_SERVER[‘SCRIPT_NAME’]</strong> 代替即可</p><h3 id="深入理解-REQUESTS数组"><a href="#深入理解-REQUESTS数组" class="headerlink" title="深入理解$_REQUESTS数组"></a>深入理解$_REQUESTS数组</h3><p>[<a href="https://github.com/hongriSec/PHP-Audit-Labs/blob/master/Part1/Day16/files/README.md">红日安全]代码审计Day16 - 深入理解$_REQUESTS数组</a></p><p>超全局数组 <strong>$_REQUEST</strong> 中的数据，是 <strong>$_GET</strong> 、 <strong>$_POST</strong> 、 <strong>$_COOKIE</strong> 的合集，而且数据是复制过去的，并不是引用。</p><p><img src="https://cdn.jsdelivr.net/gh/LiAoRJ/pic/202204232129558.png"></p><p>所以很多时候仅仅是对**$_GET** 、 <strong>$_POST</strong>的传参做了限制，但利用时的变量确实使用**$_REQUEST**传入的，相当于并没有进行过滤。</p><h4 id="利用场景：-14"><a href="#利用场景：-14" class="headerlink" title="利用场景："></a>利用场景：</h4><p>XSS，SQL注入等</p><h4 id="修复建议：-15"><a href="#修复建议：-15" class="headerlink" title="修复建议："></a><strong>修复建议：</strong></h4><p>优化参数处理逻辑。</p><h3 id="Raw-MD5-Hash引发的注入"><a href="#Raw-MD5-Hash引发的注入" class="headerlink" title="Raw MD5 Hash引发的注入"></a>Raw MD5 Hash引发的注入</h3><p>[<a href="https://github.com/hongriSec/PHP-Audit-Labs/blob/master/Part1/Day17/files/README.md">红日安全]代码审计Day17 - Raw MD5 Hash引发的注入</a></p><blockquote><p><a href="http://php.net/manual/zh/function.md5.php">md5</a> — 计算字符串的 MD5 散列值</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">string</span> <span class="title function_ invoke__">md5</span> ( <span class="keyword">string</span> <span class="variable">$str</span> [, <span class="keyword">bool</span> <span class="variable">$raw_output</span> = <span class="literal">false</span> ] )</span><br></pre></td></tr></table></figure><p>如果可选的 <code>raw_output</code> 被设置为 <strong>TRUE</strong>，那么 MD5 报文摘要将以16字节长度的原始二进制格式返回。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/LiAoRJ/pic/202204232133969.png"></p><p>案例：</p><p><img src="https://cdn.jsdelivr.net/gh/LiAoRJ/pic/202204232134254.png"></p><p>我可以控制的点有两个变量，一个是 <strong>$user</strong> ，一个是 <strong>$pass</strong> ，**$pass** 经过了 <strong>md5</strong> 的处理，但是返回字段不是标准的md5值，**$user** 经过了 <strong>addslashes</strong> 函数的处理，无法引入特殊符号去闭合。</p><p>如果我们经过 <strong>$pass &#x3D; md5($this-&gt;password, true);</strong> 处理之后的值逃逸出一个反斜杆，那么实际上带入到数据库的值就如下所示：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select <span class="title function_ invoke__">count</span>(p) <span class="keyword">from</span> user s where password=<span class="string">&#x27;xxxxxx\&#x27; and user=&#x27;</span>xxx<span class="comment">#&#x27;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/LiAoRJ/pic/202204232135110.png" alt="3"></p><p>发现 <strong>md5(128, true)</strong> 最后的结果带有反斜杠。</p><p>payload如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">user= OR <span class="number">1</span>=<span class="number">1</span><span class="comment">#&amp;passwd=128</span></span><br></pre></td></tr></table></figure><p>带入到数据库查询的语句如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select <span class="title function_ invoke__">count</span>(p) <span class="keyword">from</span> user s where password=<span class="string">&#x27;v�a�n���l���q��\&#x27; and user=&#x27;</span> OR <span class="number">1</span>=<span class="number">1</span><span class="comment">#&#x27;</span></span><br></pre></td></tr></table></figure><h4 id="利用场景：-15"><a href="#利用场景：-15" class="headerlink" title="利用场景："></a>利用场景：</h4><p>CTF遇见过</p><h4 id="修复建议：-16"><a href="#修复建议：-16" class="headerlink" title="修复建议："></a>修复建议：</h4><p>建议在使用 <strong>md5</strong> 函数的时候，不要将 <strong>$raw_output</strong> 字段设置为<strong>true</strong> 。</p>]]></content>
      
      
      <categories>
          
          <category> 代码审计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 代码审计 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SRC姿势(二)</title>
      <link href="/2022/04/17/SRC%E5%A7%BF%E5%8A%BF(%E4%BA%8C)/"/>
      <url>/2022/04/17/SRC%E5%A7%BF%E5%8A%BF(%E4%BA%8C)/</url>
      
        <content type="html"><![CDATA[<h1 id="SRC姿势-二"><a href="#SRC姿势-二" class="headerlink" title="SRC姿势(二)"></a>SRC姿势(二)</h1><p>新增漏洞银行分享和挖百度的大佬的分享</p><p>未来将会收集点国外赏金猎人的思路。</p><p>github地址：<a href="https://github.com/LiAoRJ/src">LiAoRJ&#x2F;src: SRC姿势收集 (github.com)</a></p>]]></content>
      
      
      <categories>
          
          <category> SRC姿势 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SRC姿势 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>go免杀思路研究</title>
      <link href="/2022/04/16/go%E5%85%8D%E6%9D%80%E6%80%9D%E8%B7%AF%E7%A0%94%E7%A9%B6/"/>
      <url>/2022/04/16/go%E5%85%8D%E6%9D%80%E6%80%9D%E8%B7%AF%E7%A0%94%E7%A9%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="go免杀思路研究"><a href="#go免杀思路研究" class="headerlink" title="go免杀思路研究"></a>go免杀思路研究</h1><p>今天看了几个Go语言的免杀项目，由于这些项目发布已经有些时间了，免杀效果早已大不如前，遂想将这几个项目核心思想结合一下，生成一个新的免杀项目，这里总结一下几个项目的核心思想：</p><ol><li><p>Syscall直接系统调用</p></li><li><p>shellcode远程加载（远程加载图片中的shellcode）</p></li><li><p>shellcode混淆加密（以Base64为例）</p></li><li><p>沙箱绕过</p></li><li><p>随机变量名生成</p><span id="more"></span></li></ol><p>参考的项目如下：</p><p><a href="https://github.com/pureqh/bypassAV">pureqh&#x2F;bypassAV: 免杀shellcode加载器 (github.com)</a></p><p><a href="https://github.com/Hangingsword/HouQing">Hangingsword&#x2F;HouQing (github.com)</a></p><p><a href="https://github.com/huadema/Gobypass">huadema&#x2F;Gobypass (github.com)</a></p><p>目前火绒没绕过去。。。这令我很吃惊，360、def完美落地，火绒我研究一下，源码比较拙劣，先不放了，放张打包成exe后的VT检测图</p><p><img src="https://cdn.jsdelivr.net/gh/LiAoRJ/pic/202204162227082.png"></p>]]></content>
      
      
      <categories>
          
          <category> 免杀研究 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 免杀研究 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>重新研究一下CSRF的攻击与防御</title>
      <link href="/2022/04/14/%E9%87%8D%E6%96%B0%E7%A0%94%E7%A9%B6%E4%B8%80%E4%B8%8BCSRF%E7%9A%84%E6%94%BB%E5%87%BB%E4%B8%8E%E9%98%B2%E5%BE%A1/"/>
      <url>/2022/04/14/%E9%87%8D%E6%96%B0%E7%A0%94%E7%A9%B6%E4%B8%80%E4%B8%8BCSRF%E7%9A%84%E6%94%BB%E5%87%BB%E4%B8%8E%E9%98%B2%E5%BE%A1/</url>
      
        <content type="html"><![CDATA[<h1 id="CSRF"><a href="#CSRF" class="headerlink" title="CSRF"></a>CSRF</h1><p><strong>定义：</strong></p><p>跨站请求伪造</p><p>挟制用户在当前已登录的Web应用程序上执行非本意的操作的攻击方法</p><span id="more"></span><p><strong>对比XSS：</strong> 跟跨网站脚本(XSS)相比，XSS 利用的是用户对指定网站的信任，CSRF 利用的是网站对用户网页浏览器的信任。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>.用户C打开浏览器，访问受信任网站<span class="selector-tag">A</span>，输入用户名和密码请求登录网站<span class="selector-tag">A</span>;</span><br><span class="line"><span class="number">2</span>.在用户信息通过验证后，网站<span class="selector-tag">A</span>产生Cookie信息并返回给浏览器，此时用户登录网站<span class="selector-tag">A</span>成功，可以正常发送请求到网站<span class="selector-tag">A</span>;</span><br><span class="line"><span class="number">3</span>.用户未退出网站<span class="selector-tag">A</span>之前，在同一浏览器中，打开一个TAB页访问网站<span class="selector-tag">B</span>;</span><br><span class="line"><span class="number">4</span>.网站<span class="selector-tag">B</span>接收到用户请求后，返回一些攻击性代码，并发出一个请求要求访问第三方站点<span class="selector-tag">A</span>;</span><br><span class="line"><span class="number">5</span>.浏览器在接收到这些攻击性代码后，根据网站<span class="selector-tag">B</span>的请求，在用户不知情的情况下携带Cookie信息，向网站<span class="selector-tag">A</span>发出请求。网站<span class="selector-tag">A</span>并不知道该请求其实是由<span class="selector-tag">B</span>发起的，所以会根据用户C的Cookie信息以C的权限处理该请求，导致来自网站<span class="selector-tag">B</span>的恶意代码被执行。</span><br></pre></td></tr></table></figure><p><strong>要被CSRF攻击，必须同时满足两个条件：</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>. 登录受信任网站<span class="selector-tag">A</span>，并在本地生成Cookie。</span><br><span class="line"><span class="number">2</span>. 在不登出<span class="selector-tag">A</span>的情况下，访问危险网站<span class="selector-tag">B</span>。</span><br></pre></td></tr></table></figure><h2 id="GET型CSRF"><a href="#GET型CSRF" class="headerlink" title="GET型CSRF"></a>GET型CSRF</h2><h5 id="乌云社区某删除功能存在CSRF漏洞（简单利用需诱骗管理员触发）"><a href="#乌云社区某删除功能存在CSRF漏洞（简单利用需诱骗管理员触发）" class="headerlink" title="乌云社区某删除功能存在CSRF漏洞（简单利用需诱骗管理员触发）"></a>乌云社区某删除功能存在CSRF漏洞（简单利用需诱骗管理员触发）</h5><p><a href="https://wooyun.website/show.php?uid=S8XttXpbELTcgJTjRpr0Gq6dLdNmnRagM9rJmzPt">https://wooyun.website/show.php?uid=S8XttXpbELTcgJTjRpr0Gq6dLdNmnRagM9rJmzPt</a></p><h5 id="新浪微博某处小功能存在CSRF漏洞（可修改用户微博某元素）"><a href="#新浪微博某处小功能存在CSRF漏洞（可修改用户微博某元素）" class="headerlink" title="新浪微博某处小功能存在CSRF漏洞（可修改用户微博某元素）"></a>新浪微博某处小功能存在CSRF漏洞（可修改用户微博某元素）</h5><p><a href="https://wooyun.website/show.php?uid=6HimWDmTrwk2d0kEhtwey5NJihxQEID4pPWgrsWp">https://wooyun.website/show.php?uid=6HimWDmTrwk2d0kEhtwey5NJihxQEID4pPWgrsWp</a></p><h2 id="POST型CSRF"><a href="#POST型CSRF" class="headerlink" title="POST型CSRF"></a>POST型CSRF</h2><h5 id="中国网络电视台官方CSRF刷微博粉"><a href="#中国网络电视台官方CSRF刷微博粉" class="headerlink" title="中国网络电视台官方CSRF刷微博粉"></a>中国网络电视台官方CSRF刷微博粉</h5><p><a href="https://wooyun.website/show.php?uid=pmxEDefy2wx977fTMeNj9NCHGkxJ5eTMh3pUlXPh">https://wooyun.website/show.php?uid=pmxEDefy2wx977fTMeNj9NCHGkxJ5eTMh3pUlXPh</a></p><h5 id="新浪微博csrf刷粉丝"><a href="#新浪微博csrf刷粉丝" class="headerlink" title="新浪微博csrf刷粉丝"></a>新浪微博csrf刷粉丝</h5><p><a href="https://wooyun.website/show.php?uid=eUTLauXnYMYB2oRcmcV6F4krh3q0HyGJF9IcMnyC">https://wooyun.website/show.php?uid=eUTLauXnYMYB2oRcmcV6F4krh3q0HyGJF9IcMnyC</a></p><h2 id="补充一点东西"><a href="#补充一点东西" class="headerlink" title="补充一点东西"></a>补充一点东西</h2><h4 id="GET-CSRF使用方法"><a href="#GET-CSRF使用方法" class="headerlink" title="GET CSRF使用方法"></a>GET CSRF使用方法</h4><p>GET请求不一定必须限制为FORM表单，JS请求进行提交，img、iframe、link等标签，css属性都可以进行GET请求</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">1. script标签利用</span><br><span class="line">&lt;a <span class="attribute">href</span>=<span class="string">&quot;恶意CSRF_URL&quot;</span>&gt;请点击我</span><br><span class="line">2. iframe利用</span><br><span class="line">&lt;iframe <span class="attribute">src</span>=<span class="string">&quot;恶意CSRF_URL&quot;</span>&gt;&lt;/iframe&gt;</span><br><span class="line">3. img标签利用</span><br><span class="line">&lt;img <span class="attribute">src</span>=<span class="string">&quot;恶意CSRF_URL&quot;</span>/&gt;</span><br><span class="line">远程加载图片，这个利用点一般在引入远程图片时，例如 头像</span><br><span class="line">4.link标签利用</span><br><span class="line">&lt;link <span class="attribute">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attribute">type</span>=<span class="string">&#x27;text/css&#x27;</span> <span class="attribute">href</span>=<span class="string">&quot;恶意CSRF_URL&quot;</span>&gt;</span><br><span class="line">4. CSS - backgroud利用</span><br><span class="line">利用 CSS中 background样式中的url来加载远程机器上的内容，从而对url中的内容发送HTTP请求</span><br><span class="line">body</span><br><span class="line">&#123;background:url(<span class="string">&quot;恶意CSRF_URL&quot;</span>);&#125;</span><br></pre></td></tr></table></figure><h2 id="CSRF蠕虫"><a href="#CSRF蠕虫" class="headerlink" title="CSRF蠕虫"></a>CSRF蠕虫</h2><h5 id="音悦台一处CSRF（2）-已经证明可构造蠕虫"><a href="#音悦台一处CSRF（2）-已经证明可构造蠕虫" class="headerlink" title="音悦台一处CSRF（2）[已经证明可构造蠕虫]"></a>音悦台一处CSRF（2）[已经证明可构造蠕虫]</h5><p><a href="https://wooyun.website/show.php?uid=0uuWjJIpThFyMfSHQaiWRvV9YutUbbnmD9NAz6MD">https://wooyun.website/show.php?uid=0uuWjJIpThFyMfSHQaiWRvV9YutUbbnmD9NAz6MD</a></p><h2 id="XSS-CSRF组合拳"><a href="#XSS-CSRF组合拳" class="headerlink" title="XSS+CSRF组合拳"></a>XSS+CSRF组合拳</h2><p>普通的CSRF需要诱导受害者点击构造的CSRF连接，但当CSRF与XSS组合之后，就能实现无意识的攻击了</p><h5 id="壹心理存储型XSS-CSRF造成蠕虫攻击"><a href="#壹心理存储型XSS-CSRF造成蠕虫攻击" class="headerlink" title="壹心理存储型XSS+CSRF造成蠕虫攻击"></a>壹心理存储型XSS+CSRF造成蠕虫攻击</h5><p><a href="https://wooyun.website/show.php?uid=wWfl0XRqzAeneYfhEsjb0tmnQ71JE6xqubtOH5kl">https://wooyun.website/show.php?uid=wWfl0XRqzAeneYfhEsjb0tmnQ71JE6xqubtOH5kl</a></p><h2 id="在业界目前防御-CSRF-攻击主要有四种策略"><a href="#在业界目前防御-CSRF-攻击主要有四种策略" class="headerlink" title="在业界目前防御 CSRF 攻击主要有四种策略"></a>在业界目前防御 CSRF 攻击主要有四种策略</h2><ol><li>验证 HTTP Referer 字段；</li><li>在请求地址中添加 token 并验证；</li><li>在 HTTP 头中自定义属性并验证；</li><li>Chrome 浏览器端启用 SameSite cookie</li></ol><p>对于绕过的方法，之后再讲</p>]]></content>
      
      
      <categories>
          
          <category> 漏洞研究 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 漏洞研究 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SRC姿势(一)</title>
      <link href="/2022/04/14/SRC%E5%A7%BF%E5%8A%BF(%E4%B8%80)/"/>
      <url>/2022/04/14/SRC%E5%A7%BF%E5%8A%BF(%E4%B8%80)/</url>
      
        <content type="html"><![CDATA[<h1 id="SRC姿势-一"><a href="#SRC姿势-一" class="headerlink" title="SRC姿势(一)"></a>SRC姿势(一)</h1><p><img src="https://cdn.jsdelivr.net/gh/LiAoRJ/pic/202204141050517.png"></p><p>github地址：<a href="https://github.com/LiAoRJ/src">LiAoRJ&#x2F;src: SRC姿势收集 (github.com)</a></p>]]></content>
      
      
      <categories>
          
          <category> SRC姿势 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SRC姿势 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
