<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>SRC姿势(三)</title>
      <link href="/2022/04/24/SRC%E5%A7%BF%E5%8A%BF(%E4%B8%89)/"/>
      <url>/2022/04/24/SRC%E5%A7%BF%E5%8A%BF(%E4%B8%89)/</url>
      
        <content type="html"><![CDATA[<div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Please enter the password to read the blog." />    <label for="pass">Please enter the password to read the blog.</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none">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</div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> SRC姿势 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SRC姿势 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>游戏漏洞挖掘——待补充</title>
      <link href="/2022/04/23/%E6%B8%B8%E6%88%8F%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E2%80%94%E2%80%94%E5%BE%85%E8%A1%A5%E5%85%85/"/>
      <url>/2022/04/23/%E6%B8%B8%E6%88%8F%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E2%80%94%E2%80%94%E5%BE%85%E8%A1%A5%E5%85%85/</url>
      
        <content type="html"><![CDATA[<h1 id="游戏漏洞挖掘"><a href="#游戏漏洞挖掘" class="headerlink" title="游戏漏洞挖掘"></a>游戏漏洞挖掘</h1><h2 id="1、游戏实名认证"><a href="#1、游戏实名认证" class="headerlink" title="1、游戏实名认证"></a>1、游戏实名认证</h2><p>输入假的sfz号码 能过认证成功 &#x3D;&#x3D;漏洞</p><p>tx低危 sn高危</p>]]></content>
      
      
      <categories>
          
          <category> SRC姿势 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SRC姿势 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>红日安全代码审计学习(一)</title>
      <link href="/2022/04/20/%E7%BA%A2%E6%97%A5%E5%AE%89%E5%85%A8%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E5%AD%A6%E4%B9%A0(%E4%B8%80)/"/>
      <url>/2022/04/20/%E7%BA%A2%E6%97%A5%E5%AE%89%E5%85%A8%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E5%AD%A6%E4%B9%A0(%E4%B8%80)/</url>
      
        <content type="html"><![CDATA[<h1 id="红日安全代码审计学习"><a href="#红日安全代码审计学习" class="headerlink" title="红日安全代码审计学习"></a>红日安全代码审计学习</h1><p>项目地址：</p><p><a href="https://github.com/hongriSec/PHP-Audit-Labs#">https://github.com/hongriSec/PHP-Audit-Labs#</a></p><p>记录一下自己的学习过程</p><p>顺便加上一些自己的理解</p><span id="more"></span><h2 id="Part1"><a href="#Part1" class="headerlink" title="Part1"></a>Part1</h2><h3 id="in-array函数缺陷"><a href="#in-array函数缺陷" class="headerlink" title="in_array函数缺陷"></a><strong>in_array函数缺陷</strong></h3><p>github地址：<a href="https://github.com/hongriSec/PHP-Audit-Labs/blob/master/Part1/Day1/files/README.md">in_array函数缺陷</a></p><blockquote><p><a href="http://php.net/manual/zh/function.in-array.php"> <strong>in_array</strong> </a>：(PHP 4, PHP 5, PHP 7)</p><p><strong>功能</strong> ：检查数组中是否存在某个值</p><p><strong>定义</strong> ： <code>bool in_array ( mixed $needle , array $haystack [, bool $strict = FALSE ] )</code></p><p>在 <strong>$haystack</strong> 中搜索 <strong>$needle</strong> ，如果第三个参数 <strong>$strict</strong> 的值为 <strong>TRUE</strong> ，则 <strong>in_array()</strong> 函数会进行强检查，检查 <strong>$needle</strong> 的类型是否和 <strong>$haystack</strong> 中的相同。如果找到 <strong>$haystack</strong> ，则返回 <strong>TRUE</strong>，否则返回 <strong>FALSE</strong>。</p></blockquote><p>in_array()第三个参数未设置为true时，是弱匹配。</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">7</span><span class="keyword">shell</span>.php </span><br></pre></td></tr></table></figure><p>&#x3D;&#x3D; </p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">7 </span></span><br></pre></td></tr></table></figure><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">1</span>,<span class="number">1</span> and if(ascii(substr((select database()),<span class="number">1</span>,<span class="number">1</span>))=<span class="number">112</span>,<span class="number">1</span>,sleep(<span class="number">3</span>)));#</span><br></pre></td></tr></table></figure><p>&#x3D;&#x3D; </p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">1 </span> </span><br></pre></td></tr></table></figure><h4 id="利用场景："><a href="#利用场景：" class="headerlink" title="利用场景："></a>利用场景：</h4><p>文件上传、SQL注入白名单绕过</p><h4 id="修复建议："><a href="#修复建议：" class="headerlink" title="修复建议："></a>修复建议：</h4><p>1、第三个参数设置为 <strong>true</strong></p><p>2、使用正则匹配来处理变量</p><h3 id="filter-var函数缺陷"><a href="#filter-var函数缺陷" class="headerlink" title="filter_var函数缺陷"></a><strong>filter_var函数缺陷</strong></h3><p>github地址：<a href="https://github.com/hongriSec/PHP-Audit-Labs/blob/master/Part1/Day2/files/README.md">filter_var函数缺陷</a></p><blockquote><p><a href="http://php.net/manual/zh/function.filter-var.php"> <strong>filter_var</strong> </a>： (PHP 5 &gt;&#x3D; 5.2.0, PHP 7)</p><p><strong>功能</strong> ：使用特定的过滤器过滤一个变量</p><p><strong>定义</strong> ：<a href="http://php.net/manual/zh/language.pseudo-types.php#language.types.mixed">mixed</a> <strong>filter_var</strong> ( <a href="http://php.net/manual/zh/language.pseudo-types.php#language.types.mixed">mixed</a> <code>$variable</code> [, int <code>$filter</code> &#x3D; FILTER_DEFAULT [, <a href="http://php.net/manual/zh/language.pseudo-types.php#language.types.mixed">mixed</a> <code>$options</code> ]] )</p></blockquote><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$url = filter<span class="constructor">_var($<span class="params">_GET</span>[&#x27;<span class="params">url</span>&#x27;],FILTER_VALIDATE_URL)</span>;</span><br><span class="line">var<span class="constructor">_dump($<span class="params">url</span>)</span>;</span><br></pre></td></tr></table></figure><p>我们用<strong>FILTER_VALIDATE_URL</strong>过滤器做测试。</p><p>可以使用 <strong>:&#x2F;&#x2F;</strong> 来绕过。</p><p>由于原文没有讲清楚为什么可以绕过，本人测试了一下应该是因为filter_var函数在使用<strong>FILTER_VALIDATE_URL</strong>过滤器时，只要参数中含有 <strong>:&#x2F;&#x2F;</strong> 就视作为有效的URL。</p><p><strong><a href="http://www.baidu.com/">http://www.baidu.com</a> 是有效的URL</strong></p><p><img src="https://cdn.jsdelivr.net/gh/LiAoRJ/pic/202204202347838.png"></p><p><strong><a href="ftp://www.baidu.com是有效url/">ftp://www.baidu.com是有效URL</a></strong></p><p><img src="https://cdn.jsdelivr.net/gh/LiAoRJ/pic/202204202354607.png"></p><p><strong>0:&#x2F;&#x2F;<a href="http://www.baidu.com也是有效url,注意这个,这里可以作为一个ssrf的小trick/">www.baidu.com也是有效URL，注意这个，这里可以作为一个SSRF的小trick</a></strong></p><p><img src="https://cdn.jsdelivr.net/gh/LiAoRJ/pic/202204202355795.png"></p><p><strong>而<a href="http://www.baidu.com是无效的url/">www.baidu.com是无效的URL</a></strong></p><p><img src="https://cdn.jsdelivr.net/gh/LiAoRJ/pic/202204202356483.png"></p><h4 id="利用场景：-1"><a href="#利用场景：-1" class="headerlink" title="利用场景："></a>利用场景：</h4><p>XSS绕过</p><p>XSS场景可以使用Javascript伪协议进行绕过</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">javascript</span>://comment％<span class="number">250</span>aalert(<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p> <strong>&#x2F;&#x2F;</strong> 在JavaScript中表示单行注释， 对**%** 百分号编码成 <strong>%25</strong>，我们这里用了字符 <strong>%0a</strong> ，该字符为换行符，所以 <strong>alert</strong> 语句与注释符 <strong>&#x2F;&#x2F;</strong> 就不在同一行</p><p>程序将浏览器发来的payload：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">javascript</span>://comment％<span class="number">250</span>aalert(<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p> 先解码成： </p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">javascript</span>://comment%<span class="number">0</span>aalert(<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p> 存储在可回显在页面上变量中，然后用户点击就会触发<strong>alert</strong>函数，弹窗。</p><p><strong>SSRF trick</strong></p><p><strong>看这篇文章</strong></p><p><a href="https://www.anquanke.com/post/id/101058">https://www.anquanke.com/post/id/101058</a></p><h4 id="修复建议：-1"><a href="#修复建议：-1" class="headerlink" title="修复建议："></a>修复建议：</h4><p>对于XSS的话，最好是过滤关键词+实体化编码。</p><p>对于ssrf的话，建议正则匹配吧。</p><h3 id="实例化任意对象漏洞"><a href="#实例化任意对象漏洞" class="headerlink" title="实例化任意对象漏洞"></a>实例化任意对象漏洞</h3><p>[<a href="https://github.com/hongriSec/PHP-Audit-Labs/blob/master/Part1/Day3/files/README.md">红日安全]代码审计Day3 - 实例化任意对象漏洞</a></p><p>这个漏洞类似于php任意代码执行了</p><p><img src="https://cdn.jsdelivr.net/gh/LiAoRJ/pic/202204210028203.png"></p><p>实例化类的类名和传入类的参数均在用户的控制之下，攻击者可以通过该漏洞，调用PHP代码库的任意构造函数。即使代码本身不包含易受攻击的构造函数，我们也可以使用PHP的内置类 <strong>SimpleXMLElement</strong> 来进行 <strong>XXE</strong> 攻击，进而读取目标文件的内容，甚至命令执行。</p><p>先看看 <strong>SimpleXMLElement</strong> 类的定义：</p><blockquote><p><a href="http://php.net/manual/zh/class.simplexmlelement.php">SimpleXMLElement</a> ：(PHP 5, PHP 7)</p><p><strong>功能</strong> ：用来表示XML文档中的元素，为PHP的内置类。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/LiAoRJ/pic/202204210103549.png"></p><p>data：格式正确的XML字符串，当参数<code>data_is_url</code>是<code>True</code>时，传入一个URL字符串</p><p>options：（可选）用于指定其他Libxml参数。</p><p><strong>SimpleXMLElement</strong> 导致的XXE攻击：</p><p><img src="https://cdn.jsdelivr.net/gh/LiAoRJ/pic/202204210034481.png"></p><h4 id="利用场景：-2"><a href="#利用场景：-2" class="headerlink" title="利用场景："></a>利用场景：</h4><p>XXE</p><h4 id="修复建议：-2"><a href="#修复建议：-2" class="headerlink" title="修复建议："></a>修复建议：</h4><p>可以修改代码，不要用这种可控的参数形式。</p><p>然后提一下对XXE漏洞进行修复，可以禁止加载XML实体对象。</p><h3 id="strpos使用不当引发漏洞"><a href="#strpos使用不当引发漏洞" class="headerlink" title="strpos使用不当引发漏洞"></a>strpos使用不当引发漏洞</h3><p>[<a href="https://github.com/hongriSec/PHP-Audit-Labs/blob/master/Part1/Day4/files/README.md">红日安全]代码审计Day4 - strpos使用不当引发漏洞</a>&#96;</p><p>结合具体场景代码</p><p><img src="https://cdn.jsdelivr.net/gh/LiAoRJ/pic/202204220113952.png"></p><p>代码在 <strong>第8行</strong> 和 <strong>第9行</strong> 使用 <strong>strpos</strong> 函数来防止输入的参数含有 &lt; 和 &gt; 符号，猜测开发者应该是考虑到非法字符注入问题。</p><blockquote><p><strong><a href="http://php.net/manual/zh/function.strpos.php">strpos</a></strong> — 查找字符串首次出现的位置</p><p>作用：主要是用来查找字符在字符串中首次出现的位置。</p><p>结构：<code>int strpos ( string $haystack , mixed $needle [, int $offset = 0 ] )</code></p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">strpos</span>(<span class="string">&#x27;abcd&#x27;</span>,<span class="string">&#x27;a&#x27;</span>));   <span class="comment">#0</span></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">strpos</span>(<span class="string">&#x27;abcd&#x27;</span>,<span class="string">&#x27;x&#x27;</span>));   <span class="comment">#false</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>上面场景代码中核心判断代码是</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(!strpos($user,&#x27;&lt;&#x27;) || !strpos($user,&#x27;&gt;&#x27;)) &amp;&amp; (!strpos($pass,&#x27;&lt;&#x27;) || !strpos($pass,&#x27;&gt;&#x27;))</span><br></pre></td></tr></table></figure><p>作者考虑到可能有黑客会在登陆点进行SQL注入测试，所以判断了一下是否出现 <strong>‘&lt;’** 或 **’&gt;’</strong> 若出现则strpos函数获得出现位置，再配合  <strong>!</strong>  取反得到false</p><p>先不说strpos函数的问题，这段代码的逻辑就有问题，如果$user只出现了&gt;或&lt;号但$pass没有出现&gt;或&lt;号，那么依然可以判定成功。</p><p>例如这样</p><p><img src="https://cdn.jsdelivr.net/gh/LiAoRJ/pic/202204220131557.png"></p><p>再说回strpos函数的绕过，因为strpos函数是取字符位置，但是如果取到了位置为<strong>0</strong>，那么通过！取反得到的就会是<strong>true</strong>了，就会导致判断成功，代码如下</p><p><img src="https://cdn.jsdelivr.net/gh/LiAoRJ/pic/202204220134822.png"></p><h4 id="利用场景：-3"><a href="#利用场景：-3" class="headerlink" title="利用场景："></a>利用场景：</h4><p>ctf印象中见过</p><h4 id="修复建议：-3"><a href="#修复建议：-3" class="headerlink" title="修复建议："></a>修复建议：</h4><p>代码逻辑优化</p><p>或者登录验证那块不要这么写了（真要防止SQL注入，这样写会不会太儿戏了。。。）</p><h3 id="escapeshellarg与escapeshellcmd使用不当"><a href="#escapeshellarg与escapeshellcmd使用不当" class="headerlink" title="escapeshellarg与escapeshellcmd使用不当"></a>escapeshellarg与escapeshellcmd使用不当</h3><p>[<a href="https://github.com/hongriSec/PHP-Audit-Labs/blob/master/Part1/Day5/files/README.md">红日安全]代码审计Day5 - escapeshellarg与escapeshellcmd使用不当</a></p><p>原理：</p><p><strong>escapeshellarg()</strong> </p><p>将转码任何已经存在的单引号</p><p>例如：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$test</span> = <span class="string">&quot;127.0.0.1&#x27; -v -d a=1&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span>(<span class="title function_ invoke__">escapeshellarg</span>(<span class="variable">$test</span>));</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;127.0.0.1&#x27;</span>\<span class="string">&#x27;&#x27;</span> -v -d a=<span class="number">1</span><span class="string">&#x27;</span></span><br></pre></td></tr></table></figure><p>这里稍微解释一下</p><p>其实是变成了三个字符串的连接</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;127.0.0.1&#x27;</span></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\<span class="string">&#x27; #这里是escapeshellarg函数的效果 原来的单引号前面加上\转义</span></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;-v -d a=1&#x27;</span></span><br></pre></td></tr></table></figure><p><strong>escapeshellcmd</strong>函数</p><p><strong>escapeshellcmd()</strong> 对字符串中可能会欺骗  shell 命令执行任意命令的字符进行转义。</p><p>反斜线（\）会在以下字符之前插入：   <code>&amp;#;</code>|*?~&lt;&gt;^()[]{}$`, <code>\x0A</code>   和 <code>\xFF</code>。 <code>&#39;</code> 和 <code>&quot;</code>   仅在不配对儿的时候被转义。   </p><p>当**escapeshellarg()<strong>与</strong>escapeshellcmd()**一起使用时就会出现参数逃逸漏洞</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$test</span> = <span class="string">&quot;127.0.0.1&#x27; -v -d a=1&quot;</span>;</span><br><span class="line"><span class="variable">$test2</span> = <span class="title function_ invoke__">escapeshellarg</span>(<span class="variable">$test</span>);</span><br><span class="line"><span class="keyword">echo</span>(<span class="title function_ invoke__">escapeshellcmd</span>(<span class="variable">$test2</span>));</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;127.0.0.1&#x27;</span>\\<span class="string">&#x27;&#x27;</span> -v -d a=<span class="number">1</span>\<span class="string">&#x27;</span></span><br></pre></td></tr></table></figure><p>依然是变成了三个部分</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;1270.0.1&#x27;</span> <span class="comment">#没有发生转义 单引号是配对的</span></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\\<span class="string">&#x27;&#x27;</span>  <span class="comment">#从之前的\&#x27; 变成 \\&#x27; 这回是反斜线被转义了 所以单引号是多出来的正好与之前的第三部分的第一个单引号配对了</span></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-v -d a=<span class="number">1</span>\<span class="string">&#x27; #因为第二部分配对了 导致第三部分的单引号多余了 所以根据函数规则 未匹配的单引号会加上反斜线转义</span></span><br></pre></td></tr></table></figure><h4 id="利用场景：-4"><a href="#利用场景：-4" class="headerlink" title="利用场景："></a>利用场景：</h4><p>参数逃逸导致远程代码执行</p><p>ctf也有遇到过</p><h4 id="修复建议：-4"><a href="#修复建议：-4" class="headerlink" title="修复建议："></a>修复建议：</h4><p>不建议大家同时使用 <strong>escapeshellcmd()</strong> 和 <strong>escapeshellarg()</strong> 函数对参数进行过滤</p><h3 id="正则使用不当导致的路径穿越问题"><a href="#正则使用不当导致的路径穿越问题" class="headerlink" title="正则使用不当导致的路径穿越问题"></a>正则使用不当导致的路径穿越问题</h3><p>[<a href="https://github.com/hongriSec/PHP-Audit-Labs/blob/master/Part1/Day6/files/README.md">红日安全]代码审计Day6 - 正则使用不当导致的路径穿越问题</a></p><blockquote><p><a href="http://php.net/manual/zh/function.preg-replace.php"><strong>preg_replace</strong></a>：(PHP 4, PHP 5, PHP 7)</p><p><strong>功能</strong> ： 函数执行一个正则表达式的搜索和替换</p><p><strong>定义</strong> ： <code>mixed preg_replace ( mixed $pattern , mixed $replacement , mixed $subject [, int $limit = -1 [, int &amp;$count ]] )</code></p><p>搜索 <strong>subject</strong> 中匹配 <strong>pattern</strong> 的部分， 如果匹配成功将其替换成 <strong>replacement</strong> 。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/LiAoRJ/pic/202204230021968.png"></p><p>本质上是对正则表达式的绕过</p><p><strong>preg_replace</strong> 中的 <strong>pattern</strong> 部分 ，该正则表达式并未起到过滤目录路径字符的作用。<code>[^a-z.-_]</code>  表示匹配除了 <strong>a</strong> 字符到 <strong>z</strong> 字符、**.** 字符到 <strong>_</strong> 字符之间的所有字符。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">../../ config.php</span><br></pre></td></tr></table></figure><p>即可删除config.php文件</p><h4 id="利用场景：-5"><a href="#利用场景：-5" class="headerlink" title="利用场景："></a>利用场景：</h4><p>本质是对正则的绕过，只要正则写的不完善，都可以进行绕过尝试。</p><p>CTF中也有出现过。</p><h4 id="修复建议：-5"><a href="#修复建议：-5" class="headerlink" title="修复建议："></a>修复建议：</h4><p>结合业务修改完善正则表达式。</p><h3 id="parse-str函数缺陷"><a href="#parse-str函数缺陷" class="headerlink" title="parse_str函数缺陷"></a>parse_str函数缺陷</h3><p>[<a href="https://github.com/hongriSec/PHP-Audit-Labs/blob/master/Part1/Day7/files/README.md">红日安全]代码审计Day7 - parse_str函数缺陷</a></p><p>这个函数的缺陷实际上导致的是一个<strong>变量覆盖</strong>漏洞。</p><blockquote><p><a href="http://php.net/manual/zh/function.parse-str.php"> <strong>parse_str</strong> </a></p><p><strong>功能</strong> ：parse_str的作用就是解析字符串并且注册成变量，它在注册变量之前不会验证当前变量是否存在，所以会直接覆盖掉当前作用域中原有的变量。</p><p><strong>定义</strong> ：<code>void parse_str( string $encoded_string [, array &amp;$result ] )</code></p><p>如果 <strong>encoded_string</strong> 是 URL 传入的查询字符串（query string），则将它解析为变量并设置到当前作用域（如果提供了 result 则会设置到该数组里 ）。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/LiAoRJ/pic/202204230119878.png"></p><h4 id="利用场景：-6"><a href="#利用场景：-6" class="headerlink" title="利用场景："></a>利用场景：</h4><p>白盒审计</p><p>ctf遇到过</p><h4 id="修复建议：-6"><a href="#修复建议：-6" class="headerlink" title="修复建议："></a>修复建议：</h4><p>在注册变量前先判断变量是否存在</p><h3 id="preg-replace函数之命令执行"><a href="#preg-replace函数之命令执行" class="headerlink" title="preg_replace函数之命令执行"></a>preg_replace函数之命令执行</h3><p>[<a href="https://github.com/hongriSec/PHP-Audit-Labs/blob/master/Part1/Day8/files/README.md">红日安全]代码审计Day8 - preg_replace函数之命令执行</a></p><blockquote><p><a href="http://php.net/manual/zh/function.preg-replace.php"><strong>preg_replace</strong></a>：(PHP 5.5)</p><p><strong>功能</strong> ： 函数执行一个正则表达式的搜索和替换</p><p><strong>定义</strong> ： <code>mixed preg_replace ( mixed $pattern , mixed $replacement , mixed $subject [, int $limit = -1 [, int &amp;$count ]] )</code></p><p>搜索 <strong>subject</strong> 中匹配 <strong>pattern</strong> 的部分， 如果匹配成功以 <strong>replacement</strong> 进行替换</p></blockquote><ul><li><strong>$pattern</strong> 存在 <strong>&#x2F;e</strong> 模式修正符，允许代码执行</li><li><strong>&#x2F;e</strong> 模式修正符，是 **preg_replace() ** 将 <strong>$replacement</strong> 当做php代码来执行</li></ul><p>总结就是 php5.5版本以下，<strong>preg_replace</strong>函数有一个&#x2F;e模式，开启了就会导致代码执行。</p><p><strong>经典问题案例：</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">header</span>(<span class="string">&quot;Content-Type: text/plain&quot;</span>);</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">complexStrtolower</span>(<span class="params"> <span class="variable">$regex</span>, <span class="variable">$value</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/(&#x27;</span>. <span class="variable">$regex</span>.<span class="string">&#x27;)/ei&#x27;</span>,<span class="string">&#x27;strtolower(&quot;\1&quot;)&#x27;</span>,<span class="variable">$value</span>);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">foreach</span> (<span class="variable">$_GET</span> <span class="keyword">as</span> <span class="variable">$regex</span> =&gt; <span class="variable">$value</span>)&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="title function_ invoke__">complexStrtolower</span>(<span class="variable">$regex</span>, <span class="variable">$value</span>).<span class="string">&quot;n&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>preg_replace 使用了 &#x2F;e 模式，导致可以代码执行，我们可以控制第一个和第三个参数，第二个参数固定为 ‘strtolower(“\1”)’ 字符串。</p><p>上面的命令执行，相当于 <strong>eval(‘strtolower(“\1”);’)</strong></p><p>如何进行命令执行其他恶意代码？</p><p>这里要用到一个PHP的小<strong>trick</strong>，<strong>反向引用</strong>。</p><p>看了几篇文章，感觉讲的不是很清楚，这里解释一下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">反向引用</span><br><span class="line">对一个正则表达式模式或部分模式 两边添加圆括号 将导致相关 匹配存储到一个临时缓冲区 中，</span><br><span class="line">所捕获的每个子匹配都按照在正则表达式模式中从左到右出现的顺序存储。</span><br><span class="line">缓冲区编号从 1 开始，最多可存储 99 个捕获的子表达式。每个缓冲区都可以使用 <span class="string">&#x27;\n&#x27;</span> 访问，</span><br><span class="line">其中 n 为一个标识特定缓冲区的一位或两位十进制数。</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">camelize</span>(<span class="params"><span class="variable">$word</span></span>) </span>&#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/(^|_)([a-z])/e&#x27;</span>, <span class="string">&#x27;strtoupper(&quot;\2&quot;)&#x27;</span>, <span class="variable">$word</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面这段代码，就是捕获匹配的 <code>(^|_)</code> 和 <code>([a-z])</code> 部分。它们从 1 开始编号，因此您有反向引用 1 和 2。</p><p>1是正则  **(^|_) ** 所匹配到的东西，2是  <strong>([a-z])</strong>  所匹配到的东西。这里还有一个隐藏点 <strong>0 是整个匹配的字符串</strong> 很多文章没讲到这个。</p><p>回到上面的代码中</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/(&#x27;</span>. <span class="variable">$regex</span>.<span class="string">&#x27;)/ei&#x27;</span>,<span class="string">&#x27;strtolower(&quot;\1&quot;)&#x27;</span>,<span class="variable">$value</span>);</span><br></pre></td></tr></table></figure><p>第二个参数中的\\1，实际上就是\1，配合反向引用的规则，\1就是指第一个子匹配项。</p><p>那上面的命令执行，就相当于 <strong>eval(‘strtolower(“满足正则表达式的$value”);’)</strong></p><p>官方 <strong>payload</strong> 为： <strong>&#x2F;?.*&#x3D;{${phpinfo()}}</strong></p><p><strong>.</strong>* 正则匹配任意多个字符</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">原先的语句： <span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/(&#x27;</span> . <span class="variable">$regex</span> . <span class="string">&#x27;)/ei&#x27;</span>, <span class="string">&#x27;strtolower(&quot;\\1&quot;)&#x27;</span>, <span class="variable">$value</span>);</span><br><span class="line">变成了语句： <span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/(.*)/ei&#x27;</span>, <span class="string">&#x27;strtolower(&quot;\\1&quot;)&#x27;</span>, &#123;$&#123;<span class="title function_ invoke__">phpinfo</span>()&#125;&#125;);</span><br></pre></td></tr></table></figure><p>但是这个payload是有问题的</p><p>以**.<em><strong>作为参数名是非法的，会自动转化成</strong>_</em>**</p><p><img src="https://cdn.jsdelivr.net/gh/LiAoRJ/pic/202204231609346.png"></p><p>图片来自：<a href="https://www.cnblogs.com/HelloCTF/p/13184476.html">https://www.cnblogs.com/HelloCTF/p/13184476.html</a></p><p>稍微修改以下payload即可</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\S*=<span class="variable">$&#123;phpinfo()&#125;</span></span><br></pre></td></tr></table></figure><p><strong>\S</strong>* 正则匹配任意多个非空白符</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">`\C`、`\D`、`\H`、`\N`、`\S`、`\V`、`\X` 都能代替</span><br></pre></td></tr></table></figure><p>匹配到 <strong>{${phpinfo()}}</strong> 或者 <strong>${phpinfo()}</strong> ，才能执行 phpinfo 函数，这是一个小坑。这实际上是 PHP可变变量 的原因。在PHP中双引号包裹的字符串中可以解析变量，而单引号则不行。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="variable">$a</span> = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;a=<span class="subst">$a</span>&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;a=$a&#x27;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a=hello </span><br><span class="line">a=<span class="variable">$a</span></span><br></pre></td></tr></table></figure><p>为什么要匹配到 <strong>{${phpinfo()}}</strong> 或者 <strong>${phpinfo()}</strong> ，才能执行 <strong>phpinfo</strong> 函数，这是一个小坑。这实际上是 <a href="http://php.net/manual/zh/language.variables.variable.php">PHP可变变量</a> 的原因。在PHP中双引号包裹的字符串中可以解析变量，而单引号则不行。 <strong>${phpinfo()}</strong> 中的 <strong>phpinfo()</strong> 会被当做变量先执行，执行后，即变成 <strong>${1}</strong> (phpinfo()成功执行返回true)。</p><h4 id="利用场景：-7"><a href="#利用场景：-7" class="headerlink" title="利用场景："></a>利用场景：</h4><p>PHP版本有限制，可能见到的机会不多。</p><p>ctf出现过作为考点的题目</p><h4 id="修复建议：-7"><a href="#修复建议：-7" class="headerlink" title="修复建议："></a>修复建议：</h4><p>避免使用 <strong>&#x2F;e</strong> 模式修正符</p><h3 id="str-replace函数过滤不当"><a href="#str-replace函数过滤不当" class="headerlink" title="str_replace函数过滤不当"></a>str_replace函数过滤不当</h3><p>[<a href="https://github.com/hongriSec/PHP-Audit-Labs/blob/master/Part1/Day9/files/README.md">红日安全]代码审计Day9 - str_replace函数过滤不当</a></p><blockquote><p><a href="http://php.net/manual/zh/function.str-replace.php"> str_replace </a>：(PHP 4, PHP 5, PHP 7)</p><p><strong>功能</strong> ：子字符串替换</p><p><strong>定义</strong> ： <code>mixed str_replace ( mixed $search , mixed $replace , mixed $subject [, int &amp;$count ] )</code></p><p>该函数返回一个字符串或者数组。如下：</p><p>str_replace(字符串1，字符串2，字符串3)：将字符串3中出现的所有字符串1换成字符串2。</p><p>str_replace(数组1，字符串1，字符串2)：将字符串2中出现的所有数组1中的值，换成字符串1。</p><p>str_replace(数组1，数组2，字符串1)：将字符串1中出现的所有数组1一一对应，替换成数组2的值，多余的替换成空字符串。</p></blockquote><p>本质是过滤不严谨</p><p><img src="https://cdn.jsdelivr.net/gh/LiAoRJ/pic/202204231919587.png"></p><p>以上代码是将 <strong>..&#x2F;</strong> 字符替换成空，然后进行路径拼接</p><p>payload：**….&#x2F;&#x2F;** 或者 <strong>…&#x2F;.&#x2F;</strong> ，在经过程序的 <strong>str_replace</strong> 函数处理后，都会变成 <strong>..&#x2F;</strong> </p><h4 id="利用场景：-8"><a href="#利用场景：-8" class="headerlink" title="利用场景："></a>利用场景：</h4><p>任意文件读取，任意文件删除……</p><h4 id="修复建议：-8"><a href="#修复建议：-8" class="headerlink" title="修复建议："></a>修复建议：</h4><p>结合业务场景进行过滤</p><h3 id="程序未恰当exit导致的问题"><a href="#程序未恰当exit导致的问题" class="headerlink" title="程序未恰当exit导致的问题"></a>程序未恰当exit导致的问题</h3><p>[<a href="https://github.com/hongriSec/PHP-Audit-Labs/blob/master/Part1/Day10/files/README.md">红日安全]代码审计Day10 - 程序未恰当exit导致的问题</a></p><p>本质上代码逻辑有问题，在本应该立即exit退出的地方，没有退出函数，使得程序继续运行，出现非预期的情况。</p><h4 id="利用场景：-9"><a href="#利用场景：-9" class="headerlink" title="利用场景："></a>利用场景：</h4><p>重装漏洞</p><h4 id="修复建议：-9"><a href="#修复建议：-9" class="headerlink" title="修复建议："></a>修复建议：</h4><p>在正确的地方退出程序即可，使用 <strong>die</strong> 、 <strong>exit</strong> 等函数。</p><h3 id="unserialize反序列化漏洞"><a href="#unserialize反序列化漏洞" class="headerlink" title="unserialize反序列化漏洞"></a>unserialize反序列化漏洞</h3><p>[<a href="https://github.com/hongriSec/PHP-Audit-Labs/blob/master/Part1/Day11/files/README.md">红日安全]代码审计Day11 - unserialize反序列化漏洞</a></p><p>这个可以说是打ctf之前经常能见到。</p><p>这里直接推几篇文章</p><p>这一篇就够了</p><p><a href="https://blog.csdn.net/solitudi/article/details/113588692">https://blog.csdn.net/solitudi/article/details/113588692</a></p><h4 id="利用场景：-10"><a href="#利用场景：-10" class="headerlink" title="利用场景："></a>利用场景：</h4><p>构造POP链rce</p><p>ctf</p><h4 id="修复建议：-10"><a href="#修复建议：-10" class="headerlink" title="修复建议："></a>修复建议：</h4><p>不要把用户的输入或者是用户可控的参数值直接放进反序列化的操作中</p><h3 id="误用htmlentities函数引发的漏洞"><a href="#误用htmlentities函数引发的漏洞" class="headerlink" title="误用htmlentities函数引发的漏洞"></a>误用htmlentities函数引发的漏洞</h3><p>[<a href="https://github.com/hongriSec/PHP-Audit-Labs/blob/master/Part1/Day12/files/README.md">红日安全]代码审计Day12 - 误用htmlentities函数引发的漏洞</a></p><blockquote><p><a href="http://php.net/manual/zh/function.htmlentities.php">htmlentities</a> — 将字符转换为 HTML 转义字符</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">string</span> <span class="title function_ invoke__">htmlentities</span> ( <span class="keyword">string</span> <span class="variable">$string</span> [, <span class="keyword">int</span> <span class="variable">$flags</span> = ENT_COMPAT | ENT_HTML401 [, <span class="keyword">string</span> <span class="variable">$encoding</span> = <span class="title function_ invoke__">ini_get</span>(<span class="string">&quot;default_charset&quot;</span>) [, <span class="keyword">bool</span> <span class="variable">$double_encode</span> = <span class="literal">true</span> ]]] )</span><br></pre></td></tr></table></figure><p>作用：在写PHP代码时，不能在字符串中直接写实体字符，PHP提供了一个将HTML特殊字符转换成实体字符的函数 htmlentities()。</p></blockquote><p>注：<strong>htmlentities()</strong> 并不能转换所有的特殊字符，是转换除了空格之外的特殊字符，且单引号和双引号需要单独控制（通过第二个参数）。第2个参数取值有3种，分别如下：</p><ul><li>ENT_COMPAT（默认值）：只转换双引号。</li><li>ENT_QUOTES：两种引号都转换。</li><li>ENT_NOQUOTES：两种引号都不转换。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/LiAoRJ/pic/202204231947807.png"></p><h4 id="利用场景：-11"><a href="#利用场景：-11" class="headerlink" title="利用场景："></a>利用场景：</h4><p>当参数没设置清楚会导致出现SQL注入、XSS。</p><h4 id="修复建议：-11"><a href="#修复建议：-11" class="headerlink" title="修复建议："></a>修复建议：</h4><p><strong>htmlentities</strong> 这个函数使用的时候，尽量加上可选参数，并且选择 <strong>ENT_QUOTES</strong> 转换单引号和双引号 参数。</p><h3 id="特定场合下addslashes函数的绕过"><a href="#特定场合下addslashes函数的绕过" class="headerlink" title="特定场合下addslashes函数的绕过"></a>特定场合下addslashes函数的绕过</h3><p>[<a href="https://github.com/hongriSec/PHP-Audit-Labs/blob/master/Part1/Day13/files/README.md">红日安全]代码审计Day13 - 特定场合下addslashes函数的绕过</a></p><blockquote><p><a href="http://php.net/manual/zh/function.addslashes.php">addslashes</a> — 使用反斜线引用字符串</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">string</span> addslashes ( <span class="built_in">string</span> $str )</span><br></pre></td></tr></table></figure><p>作用：在单引号（’）、双引号（”）、反斜线（\）与 NULL（ <strong>NULL</strong> 字符）字符之前加上反斜线。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/LiAoRJ/pic/202204231952107.png"></p><p>具体案例：</p><p><img src="https://cdn.jsdelivr.net/gh/LiAoRJ/pic/202204231956690.png"></p><p>代码 <strong>第33行</strong> ，通过 <strong>POST</strong> 方式传入 <strong>user</strong> 和 <strong>passwd</strong> 两个参数，通过 <strong>isValid()</strong> 来判断登陆是否合法。我们跟进一下 <strong>isValid()</strong> 这个函数，该函数主要功能代码在 <strong>第12行-第22行</strong> ，我们看到 <strong>13行</strong> 和 <strong>14行</strong> 调用 <strong>sanitizeInput()</strong> 针对 <strong>user</strong> 和 <strong>password</strong> 进行相关处理。</p><p>跟进一下 <strong>sanitizeInput()</strong> ，主要功能代码在 <strong>第24行-第29行</strong> ，这里针对输入的数据调用 <strong>addslashes</strong> 函数进行处理，然后再针对处理后的内容进行长度的判断，如果长度大于20，就只截取前20个字符。</p><p>滤了单引号，正常情况下是没有注入了，那为什么还能导致注入了，原因实际上出在了 <strong>substr</strong> 函数</p><blockquote><p><a href="http://php.net/manual/zh/function.substr.php">substr</a> — 返回字符串的子串</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">string</span> substr ( <span class="built_in">string</span> $string , <span class="built_in">int</span> $start [, <span class="built_in">int</span> $length ] )</span><br></pre></td></tr></table></figure><p>作用：返回字符串 <code>string</code> 由 <code>start</code> 和 <code>length</code> 参数指定的子字符串。</p></blockquote><p>代码中length默认为20</p><p>我们里可以用他默认的长度为20，设计一个payload</p><p>正常情况输入</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">user=<span class="number">1234567890123456789</span><span class="string">&#x27;</span></span><br></pre></td></tr></table></figure><p>会被转换成</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">user=<span class="number">1234567890123456789</span>\<span class="string">&#x27;</span></span><br></pre></td></tr></table></figure><p>但是经过substr函数的截取</p><p>又变成了</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">user</span><span class="operator">=</span><span class="number">1234567890123456789</span>\</span><br></pre></td></tr></table></figure><p>再结合具体代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select <span class="title function_ invoke__">count</span>(p) <span class="keyword">from</span> user u where user = <span class="string">&#x27;1234567890123456789\&#x27; AND password = &#x27;</span><span class="variable">$pass</span><span class="string">&#x27;</span></span><br></pre></td></tr></table></figure><p>\将本来是用来闭合user的单引号转义成了正常的单引号，所以签名的单引号与$pass的前一个单引号进行了闭合。</p><p>这里我们让 <strong>pass&#x3D;or 1&#x3D;1#</strong> ，那么最后的sql语句如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select <span class="title function_ invoke__">count</span>(p) <span class="keyword">from</span> user where user = <span class="string">&#x27;1234567890123456789\&#x27; AND password = &#x27;</span><span class="keyword">or</span> <span class="number">1</span>=<span class="number">1</span><span class="comment">#&#x27;</span></span><br></pre></td></tr></table></figure><p>sql注入成功。</p><h4 id="利用场景"><a href="#利用场景" class="headerlink" title="利用场景:"></a>利用场景:</h4><p>白盒审计</p><p>ctf</p><h4 id="修复建议：-12"><a href="#修复建议：-12" class="headerlink" title="修复建议："></a>修复建议：</h4><p>结合程序逻辑进行代码优化。</p><h3 id="从变量覆盖到getshell"><a href="#从变量覆盖到getshell" class="headerlink" title="从变量覆盖到getshell"></a>从变量覆盖到getshell</h3><p>[<a href="https://github.com/hongriSec/PHP-Audit-Labs/blob/master/Part1/Day14/files/README.md">红日安全]代码审计Day14 - 从变量覆盖到getshell</a></p><p><img src="https://cdn.jsdelivr.net/gh/LiAoRJ/pic/202204232044601.png"></p><p>在 <strong>第10-11行</strong> 处， <strong>Carrot</strong> 类的构造方法将超全局数组 <strong>$_GET</strong> 进行变量注册，这样即可覆盖 <strong>第8行</strong> 已定义的 <strong>$this-&gt;</strong> 变量。而在 <strong>第16行</strong> 处的析构函数中， <strong>file_put_contents</strong> 函数的第一个参数又是由 <strong>$this-&gt;</strong> 变量拼接的，这就导致我们可以控制写入文件的位置，最终造成任意文件写入问题。下面我们试着使用 <strong>payload</strong> ：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id=../<span class="keyword">var</span>/www/html/shell.php&amp;shell=<span class="string">&#x27;,)%0a&lt;?php phpinfo();?&gt;//</span></span><br></pre></td></tr></table></figure><p>shell.php文件中内容：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">array</span>(</span><br><span class="line">    <span class="string">&#x27;id&#x27;</span> =&gt; <span class="string">&#x27;../var/www/html/shell.php&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;lost&#x27;</span> =&gt; <span class="number">0</span>,</span><br><span class="line">    <span class="string">&#x27;bought&#x27;</span> =&gt; <span class="number">0</span>,</span><br><span class="line">    <span class="string">&#x27;shell&#x27;</span> =&gt; <span class="string">&#x27;\&#x27;,)</span></span><br><span class="line"><span class="string">&lt;?php phpinfo();?&gt;//&#x27;</span>,</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>这里注意，shell变量中的反斜杠\是自动加上的，是给我们传入shell参数的内容中的单引号转义的。</p><h4 id="利用场景：-12"><a href="#利用场景：-12" class="headerlink" title="利用场景："></a>利用场景：</h4><p>变脸覆盖的场景有写shell还有覆盖session登录等等</p><h4 id="修复建议：-13"><a href="#修复建议：-13" class="headerlink" title="修复建议："></a>修复建议：</h4><p>检测变量名是否为PHP原有的超全局数组，如果是则直接退出并告知变量不允许</p><h3 id="SERVER-‘PHP-SELF’-导致的防御失效问题"><a href="#SERVER-‘PHP-SELF’-导致的防御失效问题" class="headerlink" title="$_SERVER[‘PHP_SELF’]导致的防御失效问题"></a>$_SERVER[‘PHP_SELF’]导致的防御失效问题</h3><p>[<a href="https://github.com/hongriSec/PHP-Audit-Labs/blob/master/Part1/Day15/files/README.md">红日安全]代码审计Day15 - $_SERVER[‘PHP_SELF’]导致的防御失效问题</a></p><p>PHP自带的**$_SERVER[‘PHP_SELF’]** 参数是可以控制</p><p><strong>PHP_SELF</strong> 指当前的页面绝对地址，比如我们的网站：<a href="http://www.test.com/redict/index.php%EF%BC%8C%E9%82%A3%E4%B9%88**PHP_SELF**%E5%B0%B1%E6%98%AF">http://www.test.com/redict/index.php，那么**PHP_SELF**就是</a> &#x2F;redict&#x2F;index.php 。</p><p>但有个小问题很多人没有注意到，当<strong>URL</strong>是<strong>PATH_INFO</strong>的时候，比如：<a href="http://www.test.com/redict/index.php/admin%EF%BC%8C%E9%82%A3%E4%B9%88**PHP_SELF**%E5%B0%B1%E6%98%AF/redict/index.php/admin">http://www.test.com/redict/index.php/admin，那么**PHP_SELF**就是/redict/index.php/admin</a> 也就是说，其实 <strong>PHP_SELF</strong> 有一部分是我们可以控制的。</p><h4 id="利用场景：-13"><a href="#利用场景：-13" class="headerlink" title="利用场景："></a>利用场景：</h4><p>任意URL跳转</p><p>有一个关于 <strong>360webscan</strong> 的防护脚本一个历史漏洞，正是使用了 <strong>$_SERVER[‘PHP_SELF’]</strong> 这个变量，导致可以绕过360webscan防护脚本的防护，脚本的防护效果失效。</p><h4 id="修复建议：-14"><a href="#修复建议：-14" class="headerlink" title="修复建议："></a>修复建议：</h4><p>使用 <strong>$_SERVER[‘SCRIPT_NAME’]</strong> 代替即可</p><h3 id="深入理解-REQUESTS数组"><a href="#深入理解-REQUESTS数组" class="headerlink" title="深入理解$_REQUESTS数组"></a>深入理解$_REQUESTS数组</h3><p>[<a href="https://github.com/hongriSec/PHP-Audit-Labs/blob/master/Part1/Day16/files/README.md">红日安全]代码审计Day16 - 深入理解$_REQUESTS数组</a></p><p>超全局数组 <strong>$_REQUEST</strong> 中的数据，是 <strong>$_GET</strong> 、 <strong>$_POST</strong> 、 <strong>$_COOKIE</strong> 的合集，而且数据是复制过去的，并不是引用。</p><p><img src="https://cdn.jsdelivr.net/gh/LiAoRJ/pic/202204232129558.png"></p><p>所以很多时候仅仅是对**$_GET** 、 <strong>$_POST</strong>的传参做了限制，但利用时的变量确实使用**$_REQUEST**传入的，相当于并没有进行过滤。</p><h4 id="利用场景：-14"><a href="#利用场景：-14" class="headerlink" title="利用场景："></a>利用场景：</h4><p>XSS，SQL注入等</p><h4 id="修复建议：-15"><a href="#修复建议：-15" class="headerlink" title="修复建议："></a><strong>修复建议：</strong></h4><p>优化参数处理逻辑。</p><h3 id="Raw-MD5-Hash引发的注入"><a href="#Raw-MD5-Hash引发的注入" class="headerlink" title="Raw MD5 Hash引发的注入"></a>Raw MD5 Hash引发的注入</h3><p>[<a href="https://github.com/hongriSec/PHP-Audit-Labs/blob/master/Part1/Day17/files/README.md">红日安全]代码审计Day17 - Raw MD5 Hash引发的注入</a></p><blockquote><p><a href="http://php.net/manual/zh/function.md5.php">md5</a> — 计算字符串的 MD5 散列值</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">string</span> <span class="title function_ invoke__">md5</span> ( <span class="keyword">string</span> <span class="variable">$str</span> [, <span class="keyword">bool</span> <span class="variable">$raw_output</span> = <span class="literal">false</span> ] )</span><br></pre></td></tr></table></figure><p>如果可选的 <code>raw_output</code> 被设置为 <strong>TRUE</strong>，那么 MD5 报文摘要将以16字节长度的原始二进制格式返回。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/LiAoRJ/pic/202204232133969.png"></p><p>案例：</p><p><img src="https://cdn.jsdelivr.net/gh/LiAoRJ/pic/202204232134254.png"></p><p>我可以控制的点有两个变量，一个是 <strong>$user</strong> ，一个是 <strong>$pass</strong> ，**$pass** 经过了 <strong>md5</strong> 的处理，但是返回字段不是标准的md5值，**$user** 经过了 <strong>addslashes</strong> 函数的处理，无法引入特殊符号去闭合。</p><p>如果我们经过 <strong>$pass &#x3D; md5($this-&gt;password, true);</strong> 处理之后的值逃逸出一个反斜杆，那么实际上带入到数据库的值就如下所示：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select <span class="title function_ invoke__">count</span>(p) <span class="keyword">from</span> user s where password=<span class="string">&#x27;xxxxxx\&#x27; and user=&#x27;</span>xxx<span class="comment">#&#x27;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/LiAoRJ/pic/202204232135110.png" alt="3"></p><p>发现 <strong>md5(128, true)</strong> 最后的结果带有反斜杠。</p><p>payload如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">user= OR <span class="number">1</span>=<span class="number">1</span><span class="comment">#&amp;passwd=128</span></span><br></pre></td></tr></table></figure><p>带入到数据库查询的语句如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select <span class="title function_ invoke__">count</span>(p) <span class="keyword">from</span> user s where password=<span class="string">&#x27;v�a�n���l���q��\&#x27; and user=&#x27;</span> OR <span class="number">1</span>=<span class="number">1</span><span class="comment">#&#x27;</span></span><br></pre></td></tr></table></figure><h4 id="利用场景：-15"><a href="#利用场景：-15" class="headerlink" title="利用场景："></a>利用场景：</h4><p>CTF遇见过</p><h4 id="修复建议：-16"><a href="#修复建议：-16" class="headerlink" title="修复建议："></a>修复建议：</h4><p>建议在使用 <strong>md5</strong> 函数的时候，不要将 <strong>$raw_output</strong> 字段设置为<strong>true</strong> 。</p>]]></content>
      
      
      <categories>
          
          <category> 代码审计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 代码审计 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SRC姿势(二)</title>
      <link href="/2022/04/17/SRC%E5%A7%BF%E5%8A%BF(%E4%BA%8C)/"/>
      <url>/2022/04/17/SRC%E5%A7%BF%E5%8A%BF(%E4%BA%8C)/</url>
      
        <content type="html"><![CDATA[<h1 id="SRC姿势-二"><a href="#SRC姿势-二" class="headerlink" title="SRC姿势(二)"></a>SRC姿势(二)</h1><p>新增漏洞银行分享和挖百度的大佬的分享</p><p>未来将会收集点国外赏金猎人的思路。</p><p>github地址：<a href="https://github.com/LiAoRJ/src">LiAoRJ&#x2F;src: SRC姿势收集 (github.com)</a></p>]]></content>
      
      
      <categories>
          
          <category> SRC姿势 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SRC姿势 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>go免杀思路研究</title>
      <link href="/2022/04/16/go%E5%85%8D%E6%9D%80%E6%80%9D%E8%B7%AF%E7%A0%94%E7%A9%B6/"/>
      <url>/2022/04/16/go%E5%85%8D%E6%9D%80%E6%80%9D%E8%B7%AF%E7%A0%94%E7%A9%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="go免杀思路研究"><a href="#go免杀思路研究" class="headerlink" title="go免杀思路研究"></a>go免杀思路研究</h1><p>今天看了几个Go语言的免杀项目，由于这些项目发布已经有些时间了，免杀效果早已大不如前，遂想将这几个项目核心思想结合一下，生成一个新的免杀项目，这里总结一下几个项目的核心思想：</p><ol><li><p>Syscall直接系统调用</p></li><li><p>shellcode远程加载（远程加载图片中的shellcode）</p></li><li><p>shellcode混淆加密（以Base64为例）</p></li><li><p>沙箱绕过</p></li><li><p>随机变量名生成</p><span id="more"></span></li></ol><p>参考的项目如下：</p><p><a href="https://github.com/pureqh/bypassAV">pureqh&#x2F;bypassAV: 免杀shellcode加载器 (github.com)</a></p><p><a href="https://github.com/Hangingsword/HouQing">Hangingsword&#x2F;HouQing (github.com)</a></p><p><a href="https://github.com/huadema/Gobypass">huadema&#x2F;Gobypass (github.com)</a></p><p>目前火绒没绕过去。。。这令我很吃惊，360、def完美落地，火绒我研究一下，源码比较拙劣，先不放了，放张打包成exe后的VT检测图</p><p><img src="https://cdn.jsdelivr.net/gh/LiAoRJ/pic/202204162227082.png"></p>]]></content>
      
      
      <categories>
          
          <category> 免杀研究 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 免杀研究 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>重新研究一下CSRF的攻击与防御</title>
      <link href="/2022/04/14/%E9%87%8D%E6%96%B0%E7%A0%94%E7%A9%B6%E4%B8%80%E4%B8%8BCSRF%E7%9A%84%E6%94%BB%E5%87%BB%E4%B8%8E%E9%98%B2%E5%BE%A1/"/>
      <url>/2022/04/14/%E9%87%8D%E6%96%B0%E7%A0%94%E7%A9%B6%E4%B8%80%E4%B8%8BCSRF%E7%9A%84%E6%94%BB%E5%87%BB%E4%B8%8E%E9%98%B2%E5%BE%A1/</url>
      
        <content type="html"><![CDATA[<h1 id="CSRF"><a href="#CSRF" class="headerlink" title="CSRF"></a>CSRF</h1><p><strong>定义：</strong></p><p>跨站请求伪造</p><p>挟制用户在当前已登录的Web应用程序上执行非本意的操作的攻击方法</p><span id="more"></span><p><strong>对比XSS：</strong> 跟跨网站脚本(XSS)相比，XSS 利用的是用户对指定网站的信任，CSRF 利用的是网站对用户网页浏览器的信任。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>.用户C打开浏览器，访问受信任网站<span class="selector-tag">A</span>，输入用户名和密码请求登录网站<span class="selector-tag">A</span>;</span><br><span class="line"><span class="number">2</span>.在用户信息通过验证后，网站<span class="selector-tag">A</span>产生Cookie信息并返回给浏览器，此时用户登录网站<span class="selector-tag">A</span>成功，可以正常发送请求到网站<span class="selector-tag">A</span>;</span><br><span class="line"><span class="number">3</span>.用户未退出网站<span class="selector-tag">A</span>之前，在同一浏览器中，打开一个TAB页访问网站<span class="selector-tag">B</span>;</span><br><span class="line"><span class="number">4</span>.网站<span class="selector-tag">B</span>接收到用户请求后，返回一些攻击性代码，并发出一个请求要求访问第三方站点<span class="selector-tag">A</span>;</span><br><span class="line"><span class="number">5</span>.浏览器在接收到这些攻击性代码后，根据网站<span class="selector-tag">B</span>的请求，在用户不知情的情况下携带Cookie信息，向网站<span class="selector-tag">A</span>发出请求。网站<span class="selector-tag">A</span>并不知道该请求其实是由<span class="selector-tag">B</span>发起的，所以会根据用户C的Cookie信息以C的权限处理该请求，导致来自网站<span class="selector-tag">B</span>的恶意代码被执行。</span><br></pre></td></tr></table></figure><p><strong>要被CSRF攻击，必须同时满足两个条件：</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>. 登录受信任网站<span class="selector-tag">A</span>，并在本地生成Cookie。</span><br><span class="line"><span class="number">2</span>. 在不登出<span class="selector-tag">A</span>的情况下，访问危险网站<span class="selector-tag">B</span>。</span><br></pre></td></tr></table></figure><h2 id="GET型CSRF"><a href="#GET型CSRF" class="headerlink" title="GET型CSRF"></a>GET型CSRF</h2><h5 id="乌云社区某删除功能存在CSRF漏洞（简单利用需诱骗管理员触发）"><a href="#乌云社区某删除功能存在CSRF漏洞（简单利用需诱骗管理员触发）" class="headerlink" title="乌云社区某删除功能存在CSRF漏洞（简单利用需诱骗管理员触发）"></a>乌云社区某删除功能存在CSRF漏洞（简单利用需诱骗管理员触发）</h5><p><a href="https://wooyun.website/show.php?uid=S8XttXpbELTcgJTjRpr0Gq6dLdNmnRagM9rJmzPt">https://wooyun.website/show.php?uid=S8XttXpbELTcgJTjRpr0Gq6dLdNmnRagM9rJmzPt</a></p><h5 id="新浪微博某处小功能存在CSRF漏洞（可修改用户微博某元素）"><a href="#新浪微博某处小功能存在CSRF漏洞（可修改用户微博某元素）" class="headerlink" title="新浪微博某处小功能存在CSRF漏洞（可修改用户微博某元素）"></a>新浪微博某处小功能存在CSRF漏洞（可修改用户微博某元素）</h5><p><a href="https://wooyun.website/show.php?uid=6HimWDmTrwk2d0kEhtwey5NJihxQEID4pPWgrsWp">https://wooyun.website/show.php?uid=6HimWDmTrwk2d0kEhtwey5NJihxQEID4pPWgrsWp</a></p><h2 id="POST型CSRF"><a href="#POST型CSRF" class="headerlink" title="POST型CSRF"></a>POST型CSRF</h2><h5 id="中国网络电视台官方CSRF刷微博粉"><a href="#中国网络电视台官方CSRF刷微博粉" class="headerlink" title="中国网络电视台官方CSRF刷微博粉"></a>中国网络电视台官方CSRF刷微博粉</h5><p><a href="https://wooyun.website/show.php?uid=pmxEDefy2wx977fTMeNj9NCHGkxJ5eTMh3pUlXPh">https://wooyun.website/show.php?uid=pmxEDefy2wx977fTMeNj9NCHGkxJ5eTMh3pUlXPh</a></p><h5 id="新浪微博csrf刷粉丝"><a href="#新浪微博csrf刷粉丝" class="headerlink" title="新浪微博csrf刷粉丝"></a>新浪微博csrf刷粉丝</h5><p><a href="https://wooyun.website/show.php?uid=eUTLauXnYMYB2oRcmcV6F4krh3q0HyGJF9IcMnyC">https://wooyun.website/show.php?uid=eUTLauXnYMYB2oRcmcV6F4krh3q0HyGJF9IcMnyC</a></p><h2 id="补充一点东西"><a href="#补充一点东西" class="headerlink" title="补充一点东西"></a>补充一点东西</h2><h4 id="GET-CSRF使用方法"><a href="#GET-CSRF使用方法" class="headerlink" title="GET CSRF使用方法"></a>GET CSRF使用方法</h4><p>GET请求不一定必须限制为FORM表单，JS请求进行提交，img、iframe、link等标签，css属性都可以进行GET请求</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">1. script标签利用</span><br><span class="line">&lt;a <span class="attribute">href</span>=<span class="string">&quot;恶意CSRF_URL&quot;</span>&gt;请点击我</span><br><span class="line">2. iframe利用</span><br><span class="line">&lt;iframe <span class="attribute">src</span>=<span class="string">&quot;恶意CSRF_URL&quot;</span>&gt;&lt;/iframe&gt;</span><br><span class="line">3. img标签利用</span><br><span class="line">&lt;img <span class="attribute">src</span>=<span class="string">&quot;恶意CSRF_URL&quot;</span>/&gt;</span><br><span class="line">远程加载图片，这个利用点一般在引入远程图片时，例如 头像</span><br><span class="line">4.link标签利用</span><br><span class="line">&lt;link <span class="attribute">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attribute">type</span>=<span class="string">&#x27;text/css&#x27;</span> <span class="attribute">href</span>=<span class="string">&quot;恶意CSRF_URL&quot;</span>&gt;</span><br><span class="line">4. CSS - backgroud利用</span><br><span class="line">利用 CSS中 background样式中的url来加载远程机器上的内容，从而对url中的内容发送HTTP请求</span><br><span class="line">body</span><br><span class="line">&#123;background:url(<span class="string">&quot;恶意CSRF_URL&quot;</span>);&#125;</span><br></pre></td></tr></table></figure><h2 id="CSRF蠕虫"><a href="#CSRF蠕虫" class="headerlink" title="CSRF蠕虫"></a>CSRF蠕虫</h2><h5 id="音悦台一处CSRF（2）-已经证明可构造蠕虫"><a href="#音悦台一处CSRF（2）-已经证明可构造蠕虫" class="headerlink" title="音悦台一处CSRF（2）[已经证明可构造蠕虫]"></a>音悦台一处CSRF（2）[已经证明可构造蠕虫]</h5><p><a href="https://wooyun.website/show.php?uid=0uuWjJIpThFyMfSHQaiWRvV9YutUbbnmD9NAz6MD">https://wooyun.website/show.php?uid=0uuWjJIpThFyMfSHQaiWRvV9YutUbbnmD9NAz6MD</a></p><h2 id="XSS-CSRF组合拳"><a href="#XSS-CSRF组合拳" class="headerlink" title="XSS+CSRF组合拳"></a>XSS+CSRF组合拳</h2><p>普通的CSRF需要诱导受害者点击构造的CSRF连接，但当CSRF与XSS组合之后，就能实现无意识的攻击了</p><h5 id="壹心理存储型XSS-CSRF造成蠕虫攻击"><a href="#壹心理存储型XSS-CSRF造成蠕虫攻击" class="headerlink" title="壹心理存储型XSS+CSRF造成蠕虫攻击"></a>壹心理存储型XSS+CSRF造成蠕虫攻击</h5><p><a href="https://wooyun.website/show.php?uid=wWfl0XRqzAeneYfhEsjb0tmnQ71JE6xqubtOH5kl">https://wooyun.website/show.php?uid=wWfl0XRqzAeneYfhEsjb0tmnQ71JE6xqubtOH5kl</a></p><h2 id="在业界目前防御-CSRF-攻击主要有四种策略"><a href="#在业界目前防御-CSRF-攻击主要有四种策略" class="headerlink" title="在业界目前防御 CSRF 攻击主要有四种策略"></a>在业界目前防御 CSRF 攻击主要有四种策略</h2><ol><li>验证 HTTP Referer 字段；</li><li>在请求地址中添加 token 并验证；</li><li>在 HTTP 头中自定义属性并验证；</li><li>Chrome 浏览器端启用 SameSite cookie</li></ol><p>对于绕过的方法，之后再讲</p>]]></content>
      
      
      <categories>
          
          <category> 漏洞研究 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 漏洞研究 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SRC姿势(一)</title>
      <link href="/2022/04/14/SRC%E5%A7%BF%E5%8A%BF(%E4%B8%80)/"/>
      <url>/2022/04/14/SRC%E5%A7%BF%E5%8A%BF(%E4%B8%80)/</url>
      
        <content type="html"><![CDATA[<h1 id="SRC姿势-一"><a href="#SRC姿势-一" class="headerlink" title="SRC姿势(一)"></a>SRC姿势(一)</h1><p><img src="https://cdn.jsdelivr.net/gh/LiAoRJ/pic/202204141050517.png"></p><p>github地址：<a href="https://github.com/LiAoRJ/src">LiAoRJ&#x2F;src: SRC姿势收集 (github.com)</a></p>]]></content>
      
      
      <categories>
          
          <category> SRC姿势 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SRC姿势 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
