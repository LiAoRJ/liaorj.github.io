<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>红日安全代码审计学习(一)</title>
      <link href="/2022/04/20/%E7%BA%A2%E6%97%A5%E5%AE%89%E5%85%A8%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E5%AD%A6%E4%B9%A0(%E4%B8%80)/"/>
      <url>/2022/04/20/%E7%BA%A2%E6%97%A5%E5%AE%89%E5%85%A8%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E5%AD%A6%E4%B9%A0(%E4%B8%80)/</url>
      
        <content type="html"><![CDATA[<h1 id="红日安全代码审计学习"><a href="#红日安全代码审计学习" class="headerlink" title="红日安全代码审计学习"></a>红日安全代码审计学习</h1><p>项目地址：</p><p><a href="https://github.com/hongriSec/PHP-Audit-Labs#">https://github.com/hongriSec/PHP-Audit-Labs#</a></p><p>学习就完事了</p><span id="more"></span><h2 id="Part1"><a href="#Part1" class="headerlink" title="Part1"></a>Part1</h2><h3 id="in-array函数缺陷"><a href="#in-array函数缺陷" class="headerlink" title="in_array函数缺陷"></a><strong>in_array函数缺陷</strong></h3><p>github地址：<a href="https://github.com/hongriSec/PHP-Audit-Labs/blob/master/Part1/Day1/files/README.md">in_array函数缺陷</a></p><blockquote><p><a href="http://php.net/manual/zh/function.in-array.php"> <strong>in_array</strong> </a>：(PHP 4, PHP 5, PHP 7)</p><p><strong>功能</strong> ：检查数组中是否存在某个值</p><p><strong>定义</strong> ： <code>bool in_array ( mixed $needle , array $haystack [, bool $strict = FALSE ] )</code></p><p>在 <strong>$haystack</strong> 中搜索 <strong>$needle</strong> ，如果第三个参数 <strong>$strict</strong> 的值为 <strong>TRUE</strong> ，则 <strong>in_array()</strong> 函数会进行强检查，检查 <strong>$needle</strong> 的类型是否和 <strong>$haystack</strong> 中的相同。如果找到 <strong>$haystack</strong> ，则返回 <strong>TRUE</strong>，否则返回 <strong>FALSE</strong>。</p></blockquote><p>in_array()第三个参数未设置为true时，是弱匹配。</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">7</span><span class="keyword">shell</span>.php </span><br></pre></td></tr></table></figure><p>&#x3D;&#x3D; </p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">7 </span></span><br></pre></td></tr></table></figure><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">1</span>,<span class="number">1</span> and if(ascii(substr((select database()),<span class="number">1</span>,<span class="number">1</span>))=<span class="number">112</span>,<span class="number">1</span>,sleep(<span class="number">3</span>)));#</span><br></pre></td></tr></table></figure><p>&#x3D;&#x3D; </p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">1 </span> </span><br></pre></td></tr></table></figure><h4 id="利用场景："><a href="#利用场景：" class="headerlink" title="利用场景："></a>利用场景：</h4><p>文件上传、SQL注入白名单绕过</p><h4 id="修复建议："><a href="#修复建议：" class="headerlink" title="修复建议："></a>修复建议：</h4><p>1、第三个参数设置为 <strong>true</strong></p><p>2、使用正则匹配来处理变量</p><h3 id="filter-var函数缺陷"><a href="#filter-var函数缺陷" class="headerlink" title="filter_var函数缺陷"></a><strong>filter_var函数缺陷</strong></h3><p>github地址：<a href="https://github.com/hongriSec/PHP-Audit-Labs/blob/master/Part1/Day2/files/README.md">filter_var函数缺陷</a></p><blockquote><p><a href="http://php.net/manual/zh/function.filter-var.php"> <strong>filter_var</strong> </a>： (PHP 5 &gt;&#x3D; 5.2.0, PHP 7)</p><p><strong>功能</strong> ：使用特定的过滤器过滤一个变量</p><p><strong>定义</strong> ：<a href="http://php.net/manual/zh/language.pseudo-types.php#language.types.mixed">mixed</a> <strong>filter_var</strong> ( <a href="http://php.net/manual/zh/language.pseudo-types.php#language.types.mixed">mixed</a> <code>$variable</code> [, int <code>$filter</code> &#x3D; FILTER_DEFAULT [, <a href="http://php.net/manual/zh/language.pseudo-types.php#language.types.mixed">mixed</a> <code>$options</code> ]] )</p></blockquote><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$url = filter<span class="constructor">_var($<span class="params">_GET</span>[&#x27;<span class="params">url</span>&#x27;],FILTER_VALIDATE_URL)</span>;</span><br><span class="line">var<span class="constructor">_dump($<span class="params">url</span>)</span>;</span><br></pre></td></tr></table></figure><p>我们用<strong>FILTER_VALIDATE_URL</strong>过滤器做测试。</p><p>可以使用 <strong>:&#x2F;&#x2F;</strong> 来绕过。</p><p>由于原文没有讲清楚为什么可以绕过，本人测试了一下应该是因为filter_var函数在使用<strong>FILTER_VALIDATE_URL</strong>过滤器时，只要参数中含有 <strong>:&#x2F;&#x2F;</strong> 就视作为有效的URL。</p><p><strong><a href="http://www.baidu.com/">http://www.baidu.com</a> 是有效的URL</strong></p><p><img src="https://cdn.jsdelivr.net/gh/LiAoRJ/pic/202204202347838.png"></p><p><strong><a href="ftp://www.baidu.com是有效url/">ftp://www.baidu.com是有效URL</a></strong></p><p><img src="https://cdn.jsdelivr.net/gh/LiAoRJ/pic/202204202354607.png"></p><p><strong>0:&#x2F;&#x2F;<a href="http://www.baidu.com也是有效url,注意这个,这里可以作为一个ssrf的小trick/">www.baidu.com也是有效URL，注意这个，这里可以作为一个SSRF的小trick</a></strong></p><p><img src="https://cdn.jsdelivr.net/gh/LiAoRJ/pic/202204202355795.png"></p><p><strong>而<a href="http://www.baidu.com是无效的url/">www.baidu.com是无效的URL</a></strong></p><p><img src="https://cdn.jsdelivr.net/gh/LiAoRJ/pic/202204202356483.png"></p><h4 id="利用场景：-1"><a href="#利用场景：-1" class="headerlink" title="利用场景："></a>利用场景：</h4><p>XSS绕过</p><p>XSS场景可以使用Javascript伪协议进行绕过</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">javascript</span>://comment％<span class="number">250</span>aalert(<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p> <strong>&#x2F;&#x2F;</strong> 在JavaScript中表示单行注释， 对**%** 百分号编码成 <strong>%25</strong>，我们这里用了字符 <strong>%0a</strong> ，该字符为换行符，所以 <strong>alert</strong> 语句与注释符 <strong>&#x2F;&#x2F;</strong> 就不在同一行</p><p>程序将浏览器发来的payload：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">javascript</span>://comment％<span class="number">250</span>aalert(<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p> 先解码成： </p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">javascript</span>://comment%<span class="number">0</span>aalert(<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p> 存储在可回显在页面上变量中，然后用户点击就会触发<strong>alert</strong>函数，弹窗。</p><p><strong>SSRF trick</strong></p><p><strong>看这篇文章</strong></p><p><a href="https://www.anquanke.com/post/id/101058">https://www.anquanke.com/post/id/101058</a></p><h4 id="修复建议：-1"><a href="#修复建议：-1" class="headerlink" title="修复建议："></a>修复建议：</h4><p>对于XSS的话，最好是过滤关键词+实体化编码。</p><p>对于ssrf的话，建议正则匹配吧。</p><h3 id="实例化任意对象漏洞"><a href="#实例化任意对象漏洞" class="headerlink" title="实例化任意对象漏洞"></a>实例化任意对象漏洞</h3><p>[<a href="https://github.com/hongriSec/PHP-Audit-Labs/blob/master/Part1/Day3/files/README.md">红日安全]代码审计Day3 - 实例化任意对象漏洞</a></p><p>这个漏洞类似于php任意代码执行了</p><p><img src="https://cdn.jsdelivr.net/gh/LiAoRJ/pic/202204210028203.png"></p><p>实例化类的类名和传入类的参数均在用户的控制之下，攻击者可以通过该漏洞，调用PHP代码库的任意构造函数。即使代码本身不包含易受攻击的构造函数，我们也可以使用PHP的内置类 <strong>SimpleXMLElement</strong> 来进行 <strong>XXE</strong> 攻击，进而读取目标文件的内容，甚至命令执行。</p><p>先看看 <strong>SimpleXMLElement</strong> 类的定义：</p><blockquote><p><a href="http://php.net/manual/zh/class.simplexmlelement.php">SimpleXMLElement</a> ：(PHP 5, PHP 7)</p><p><strong>功能</strong> ：用来表示XML文档中的元素，为PHP的内置类。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/LiAoRJ/pic/202204210103549.png"></p><p>data：格式正确的XML字符串，当参数<code>data_is_url</code>是<code>True</code>时，传入一个URL字符串</p><p>options：（可选）用于指定其他Libxml参数。</p><p><strong>SimpleXMLElement</strong> 导致的XXE攻击：</p><p><img src="https://cdn.jsdelivr.net/gh/LiAoRJ/pic/202204210034481.png"></p>]]></content>
      
      
      <categories>
          
          <category> 代码审计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 代码审计 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SRC姿势(二)</title>
      <link href="/2022/04/17/SRC%E5%A7%BF%E5%8A%BF(%E4%BA%8C)/"/>
      <url>/2022/04/17/SRC%E5%A7%BF%E5%8A%BF(%E4%BA%8C)/</url>
      
        <content type="html"><![CDATA[<h1 id="SRC姿势-二"><a href="#SRC姿势-二" class="headerlink" title="SRC姿势(二)"></a>SRC姿势(二)</h1><p>新增漏洞银行分享和挖百度的大佬的分享</p><p>未来将会收集点国外赏金猎人的思路。</p><p>github地址：<a href="https://github.com/LiAoRJ/src">LiAoRJ&#x2F;src: SRC姿势收集 (github.com)</a></p>]]></content>
      
      
      <categories>
          
          <category> SRC姿势 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SRC姿势 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>go免杀思路研究</title>
      <link href="/2022/04/16/go%E5%85%8D%E6%9D%80%E6%80%9D%E8%B7%AF%E7%A0%94%E7%A9%B6/"/>
      <url>/2022/04/16/go%E5%85%8D%E6%9D%80%E6%80%9D%E8%B7%AF%E7%A0%94%E7%A9%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="go免杀思路研究"><a href="#go免杀思路研究" class="headerlink" title="go免杀思路研究"></a>go免杀思路研究</h1><p>今天看了几个Go语言的免杀项目，由于这些项目发布已经有些时间了，免杀效果早已大不如前，遂想将这几个项目核心思想结合一下，生成一个新的免杀项目，这里总结一下几个项目的核心思想：</p><ol><li><p>Syscall直接系统调用</p></li><li><p>shellcode远程加载（远程加载图片中的shellcode）</p></li><li><p>shellcode混淆加密（以Base64为例）</p></li><li><p>沙箱绕过</p></li><li><p>随机变量名生成</p><span id="more"></span></li></ol><p>参考的项目如下：</p><p><a href="https://github.com/pureqh/bypassAV">pureqh&#x2F;bypassAV: 免杀shellcode加载器 (github.com)</a></p><p><a href="https://github.com/Hangingsword/HouQing">Hangingsword&#x2F;HouQing (github.com)</a></p><p><a href="https://github.com/huadema/Gobypass">huadema&#x2F;Gobypass (github.com)</a></p><p>目前火绒没绕过去。。。这令我很吃惊，360、def完美落地，火绒我研究一下，源码比较拙劣，先不放了，放张打包成exe后的VT检测图</p><p><img src="https://cdn.jsdelivr.net/gh/LiAoRJ/pic/202204162227082.png"></p>]]></content>
      
      
      <categories>
          
          <category> 免杀研究 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 免杀研究 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>重新研究一下CSRF的攻击与防御</title>
      <link href="/2022/04/14/%E9%87%8D%E6%96%B0%E7%A0%94%E7%A9%B6%E4%B8%80%E4%B8%8BCSRF%E7%9A%84%E6%94%BB%E5%87%BB%E4%B8%8E%E9%98%B2%E5%BE%A1/"/>
      <url>/2022/04/14/%E9%87%8D%E6%96%B0%E7%A0%94%E7%A9%B6%E4%B8%80%E4%B8%8BCSRF%E7%9A%84%E6%94%BB%E5%87%BB%E4%B8%8E%E9%98%B2%E5%BE%A1/</url>
      
        <content type="html"><![CDATA[<h1 id="CSRF"><a href="#CSRF" class="headerlink" title="CSRF"></a>CSRF</h1><p><strong>定义：</strong></p><p>跨站请求伪造</p><p>挟制用户在当前已登录的Web应用程序上执行非本意的操作的攻击方法</p><span id="more"></span><p><strong>对比XSS：</strong> 跟跨网站脚本(XSS)相比，XSS 利用的是用户对指定网站的信任，CSRF 利用的是网站对用户网页浏览器的信任。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>.用户C打开浏览器，访问受信任网站<span class="selector-tag">A</span>，输入用户名和密码请求登录网站<span class="selector-tag">A</span>;</span><br><span class="line"><span class="number">2</span>.在用户信息通过验证后，网站<span class="selector-tag">A</span>产生Cookie信息并返回给浏览器，此时用户登录网站<span class="selector-tag">A</span>成功，可以正常发送请求到网站<span class="selector-tag">A</span>;</span><br><span class="line"><span class="number">3</span>.用户未退出网站<span class="selector-tag">A</span>之前，在同一浏览器中，打开一个TAB页访问网站<span class="selector-tag">B</span>;</span><br><span class="line"><span class="number">4</span>.网站<span class="selector-tag">B</span>接收到用户请求后，返回一些攻击性代码，并发出一个请求要求访问第三方站点<span class="selector-tag">A</span>;</span><br><span class="line"><span class="number">5</span>.浏览器在接收到这些攻击性代码后，根据网站<span class="selector-tag">B</span>的请求，在用户不知情的情况下携带Cookie信息，向网站<span class="selector-tag">A</span>发出请求。网站<span class="selector-tag">A</span>并不知道该请求其实是由<span class="selector-tag">B</span>发起的，所以会根据用户C的Cookie信息以C的权限处理该请求，导致来自网站<span class="selector-tag">B</span>的恶意代码被执行。</span><br></pre></td></tr></table></figure><p><strong>要被CSRF攻击，必须同时满足两个条件：</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>. 登录受信任网站<span class="selector-tag">A</span>，并在本地生成Cookie。</span><br><span class="line"><span class="number">2</span>. 在不登出<span class="selector-tag">A</span>的情况下，访问危险网站<span class="selector-tag">B</span>。</span><br></pre></td></tr></table></figure><h2 id="GET型CSRF"><a href="#GET型CSRF" class="headerlink" title="GET型CSRF"></a>GET型CSRF</h2><h5 id="乌云社区某删除功能存在CSRF漏洞（简单利用需诱骗管理员触发）"><a href="#乌云社区某删除功能存在CSRF漏洞（简单利用需诱骗管理员触发）" class="headerlink" title="乌云社区某删除功能存在CSRF漏洞（简单利用需诱骗管理员触发）"></a>乌云社区某删除功能存在CSRF漏洞（简单利用需诱骗管理员触发）</h5><p><a href="https://wooyun.website/show.php?uid=S8XttXpbELTcgJTjRpr0Gq6dLdNmnRagM9rJmzPt">https://wooyun.website/show.php?uid=S8XttXpbELTcgJTjRpr0Gq6dLdNmnRagM9rJmzPt</a></p><h5 id="新浪微博某处小功能存在CSRF漏洞（可修改用户微博某元素）"><a href="#新浪微博某处小功能存在CSRF漏洞（可修改用户微博某元素）" class="headerlink" title="新浪微博某处小功能存在CSRF漏洞（可修改用户微博某元素）"></a>新浪微博某处小功能存在CSRF漏洞（可修改用户微博某元素）</h5><p><a href="https://wooyun.website/show.php?uid=6HimWDmTrwk2d0kEhtwey5NJihxQEID4pPWgrsWp">https://wooyun.website/show.php?uid=6HimWDmTrwk2d0kEhtwey5NJihxQEID4pPWgrsWp</a></p><h2 id="POST型CSRF"><a href="#POST型CSRF" class="headerlink" title="POST型CSRF"></a>POST型CSRF</h2><h5 id="中国网络电视台官方CSRF刷微博粉"><a href="#中国网络电视台官方CSRF刷微博粉" class="headerlink" title="中国网络电视台官方CSRF刷微博粉"></a>中国网络电视台官方CSRF刷微博粉</h5><p><a href="https://wooyun.website/show.php?uid=pmxEDefy2wx977fTMeNj9NCHGkxJ5eTMh3pUlXPh">https://wooyun.website/show.php?uid=pmxEDefy2wx977fTMeNj9NCHGkxJ5eTMh3pUlXPh</a></p><h5 id="新浪微博csrf刷粉丝"><a href="#新浪微博csrf刷粉丝" class="headerlink" title="新浪微博csrf刷粉丝"></a>新浪微博csrf刷粉丝</h5><p><a href="https://wooyun.website/show.php?uid=eUTLauXnYMYB2oRcmcV6F4krh3q0HyGJF9IcMnyC">https://wooyun.website/show.php?uid=eUTLauXnYMYB2oRcmcV6F4krh3q0HyGJF9IcMnyC</a></p><h2 id="补充一点东西"><a href="#补充一点东西" class="headerlink" title="补充一点东西"></a>补充一点东西</h2><h4 id="GET-CSRF使用方法"><a href="#GET-CSRF使用方法" class="headerlink" title="GET CSRF使用方法"></a>GET CSRF使用方法</h4><p>GET请求不一定必须限制为FORM表单，JS请求进行提交，img、iframe、link等标签，css属性都可以进行GET请求</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">1. script标签利用</span><br><span class="line">&lt;a <span class="attribute">href</span>=<span class="string">&quot;恶意CSRF_URL&quot;</span>&gt;请点击我</span><br><span class="line">2. iframe利用</span><br><span class="line">&lt;iframe <span class="attribute">src</span>=<span class="string">&quot;恶意CSRF_URL&quot;</span>&gt;&lt;/iframe&gt;</span><br><span class="line">3. img标签利用</span><br><span class="line">&lt;img <span class="attribute">src</span>=<span class="string">&quot;恶意CSRF_URL&quot;</span>/&gt;</span><br><span class="line">远程加载图片，这个利用点一般在引入远程图片时，例如 头像</span><br><span class="line">4.link标签利用</span><br><span class="line">&lt;link <span class="attribute">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attribute">type</span>=<span class="string">&#x27;text/css&#x27;</span> <span class="attribute">href</span>=<span class="string">&quot;恶意CSRF_URL&quot;</span>&gt;</span><br><span class="line">4. CSS - backgroud利用</span><br><span class="line">利用 CSS中 background样式中的url来加载远程机器上的内容，从而对url中的内容发送HTTP请求</span><br><span class="line">body</span><br><span class="line">&#123;background:url(<span class="string">&quot;恶意CSRF_URL&quot;</span>);&#125;</span><br></pre></td></tr></table></figure><h2 id="CSRF蠕虫"><a href="#CSRF蠕虫" class="headerlink" title="CSRF蠕虫"></a>CSRF蠕虫</h2><h5 id="音悦台一处CSRF（2）-已经证明可构造蠕虫"><a href="#音悦台一处CSRF（2）-已经证明可构造蠕虫" class="headerlink" title="音悦台一处CSRF（2）[已经证明可构造蠕虫]"></a>音悦台一处CSRF（2）[已经证明可构造蠕虫]</h5><p><a href="https://wooyun.website/show.php?uid=0uuWjJIpThFyMfSHQaiWRvV9YutUbbnmD9NAz6MD">https://wooyun.website/show.php?uid=0uuWjJIpThFyMfSHQaiWRvV9YutUbbnmD9NAz6MD</a></p><h2 id="XSS-CSRF组合拳"><a href="#XSS-CSRF组合拳" class="headerlink" title="XSS+CSRF组合拳"></a>XSS+CSRF组合拳</h2><p>普通的CSRF需要诱导受害者点击构造的CSRF连接，但当CSRF与XSS组合之后，就能实现无意识的攻击了</p><h5 id="壹心理存储型XSS-CSRF造成蠕虫攻击"><a href="#壹心理存储型XSS-CSRF造成蠕虫攻击" class="headerlink" title="壹心理存储型XSS+CSRF造成蠕虫攻击"></a>壹心理存储型XSS+CSRF造成蠕虫攻击</h5><p><a href="https://wooyun.website/show.php?uid=wWfl0XRqzAeneYfhEsjb0tmnQ71JE6xqubtOH5kl">https://wooyun.website/show.php?uid=wWfl0XRqzAeneYfhEsjb0tmnQ71JE6xqubtOH5kl</a></p><h2 id="在业界目前防御-CSRF-攻击主要有四种策略"><a href="#在业界目前防御-CSRF-攻击主要有四种策略" class="headerlink" title="在业界目前防御 CSRF 攻击主要有四种策略"></a>在业界目前防御 CSRF 攻击主要有四种策略</h2><ol><li>验证 HTTP Referer 字段；</li><li>在请求地址中添加 token 并验证；</li><li>在 HTTP 头中自定义属性并验证；</li><li>Chrome 浏览器端启用 SameSite cookie</li></ol><p>对于绕过的方法，之后再讲</p>]]></content>
      
      
      <categories>
          
          <category> 漏洞研究 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 漏洞研究 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SRC姿势(一)</title>
      <link href="/2022/04/14/SRC%E5%A7%BF%E5%8A%BF(%E4%B8%80)/"/>
      <url>/2022/04/14/SRC%E5%A7%BF%E5%8A%BF(%E4%B8%80)/</url>
      
        <content type="html"><![CDATA[<h1 id="SRC姿势-一"><a href="#SRC姿势-一" class="headerlink" title="SRC姿势(一)"></a>SRC姿势(一)</h1><p><img src="https://cdn.jsdelivr.net/gh/LiAoRJ/pic/202204141050517.png"></p><p>github地址：<a href="https://github.com/LiAoRJ/src">LiAoRJ&#x2F;src: SRC姿势收集 (github.com)</a></p>]]></content>
      
      
      <categories>
          
          <category> SRC姿势 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SRC姿势 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
